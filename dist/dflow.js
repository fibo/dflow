var __defProp=Object.defineProperty;var __defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __spreadValues=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop])}return a};var __spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __objRest=(source,exclude)=>{var target={};for(var prop in source)if(__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0)target[prop]=source[prop];if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source)){if(exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop))target[prop]=source[prop]}return target};var __publicField=(obj,key,value)=>{__defNormalProp(obj,typeof key!=="symbol"?key+"":key,value);return value};const generateItemId=(itemMap,idPrefix,i)=>{const n=i!=null?i:itemMap.size;const id=`${idPrefix}${n}`;return itemMap.has(id)?generateItemId(itemMap,idPrefix,n+1):id};const _Dflow=class{static inferDataType(arg){if(_Dflow.isBoolean(arg))return["boolean"];if(_Dflow.isNumber(arg))return["number"];if(_Dflow.isString(arg))return["string"];if(_Dflow.isArray(arg))return["array"];if(_Dflow.isObject(arg))return["object"];return[]}static isArray(arg){return Array.isArray(arg)&&arg.every(_Dflow.isDflowData)}static isBoolean(arg){return typeof arg==="boolean"}static isDflowId(arg){return typeof arg==="string"&&arg!==""}static isObject(arg){return typeof arg==="object"&&arg!==null&&!Array.isArray(arg)&&Object.values(arg).every(_Dflow.isDflowData)}static isNumber(arg){return typeof arg==="number"&&!isNaN(arg)&&Number.isFinite(arg)}static isString(arg){return typeof arg==="string"}static isDflowData(arg){if(arg===void 0)return false;return _Dflow.isString(arg)||_Dflow.isBoolean(arg)||_Dflow.isNumber(arg)||_Dflow.isObject(arg)||_Dflow.isArray(arg)||_Dflow.isDflowId(arg)}static isValidDataType(types,data){const isAnyType=types.length===0;if(isAnyType)return true;return types.some(pinType=>{switch(pinType){case"array":return _Dflow.isArray(data);case"boolean":return _Dflow.isBoolean(data);case"number":return _Dflow.isNumber(data);case"object":return _Dflow.isObject(data);case"string":return _Dflow.isString(data);case"DflowId":return _Dflow.isDflowId(data);default:return false}})}};let Dflow=_Dflow;__publicField(Dflow,"dataTypes",["string","number","boolean","object","array","DflowId"]);class DflowPin{constructor({nodeId,name,types=[]}){__publicField(this,"name");__publicField(this,"nodeId");__publicField(this,"types");if(name)this.name=name;this.types=types;this.nodeId=nodeId}static canConnect(sourceTypes,targetTypes){const sourceHasTypeAny=sourceTypes.length===0;if(sourceHasTypeAny)return true;const targetHasTypeAny=targetTypes.length===0;if(targetHasTypeAny)return true;return targetTypes.some(pinType=>sourceTypes.includes(pinType))}get hasTypeAny(){return this.types.length===0}hasType(type){return this.hasTypeAny||this.types.includes(type)}}class DflowInput extends DflowPin{constructor(_a){var _b=_a,{id,optional}=_b,pin=__objRest(_b,["id","optional"]);super(pin);__publicField(this,"id");__publicField(this,"source");__publicField(this,"optional");this.id=id;if(optional)this.optional=optional}get data(){var _a;return(_a=this.source)==null?void 0:_a.data}get isConnected(){return this.source!==void 0}connectTo(pin){if(!DflowPin.canConnect(pin.types,this.types)){throw new DflowErrorCannotConnectPins({source:[pin.nodeId,pin.id],target:[this.nodeId,this.id]})}this.source=pin}disconnect(){this.source=void 0}toObject(){return{id:this.id}}}class DflowOutput extends DflowPin{constructor(_c){var _d=_c,{id,data}=_d,pin=__objRest(_d,["id","data"]);super(pin);__publicField(this,"id");__publicField(this,"value");this.id=id;this.value=data}get data(){return this.value}set data(arg){if(arg===void 0){this.clear();return}if(this.hasType("string")&&Dflow.isString(arg)||this.hasType("number")&&Dflow.isNumber(arg)||this.hasType("boolean")&&Dflow.isBoolean(arg)||this.hasType("object")&&Dflow.isObject(arg)||this.hasType("array")&&Dflow.isArray(arg)||this.hasType("DflowId")&&Dflow.isDflowId(arg)||this.hasTypeAny&&Dflow.isDflowData(arg)){this.value=arg}else this.clear()}clear(){this.value=void 0}toObject(){const obj={id:this.id};if(this.value!==void 0)obj.d=this.value;return obj}}class DflowNode{constructor({id,kind,inputs=[],outputs=[],host}){__publicField(this,"id");__publicField(this,"inputsMap",new Map);__publicField(this,"outputsMap",new Map);__publicField(this,"inputPosition",[]);__publicField(this,"outputPosition",[]);__publicField(this,"kind");__publicField(this,"host");var _a,_b;this.id=id;this.host=host;this.kind=kind;for(const obj of inputs){const id1=(_a=obj.id)!=null?_a:generateItemId(this.inputsMap,"i");const input2=new DflowInput(__spreadProps(__spreadValues({},obj),{id:id1,nodeId:this.id}));this.inputsMap.set(id1,input2);this.inputPosition.push(id1)}for(const obj1 of outputs){const id2=(_b=obj1.id)!=null?_b:generateItemId(this.outputsMap,"o");const output2=new DflowOutput(__spreadProps(__spreadValues({},obj1),{id:id2,nodeId:this.id}));this.outputsMap.set(id2,output2);this.outputPosition.push(id2)}}static input(typing=[],rest){return __spreadValues({types:typeof typing==="string"?[typing]:typing},rest)}static output(typing=[],rest){return __spreadValues({types:typeof typing==="string"?[typing]:typing},rest)}get inputsDataAreValid(){for(const{data,types,optional}of this.inputsMap.values()){if(optional&&data===void 0)continue;if(Dflow.isValidDataType(types,data))continue;return false}return true}clearOutputs(){for(const output2 of this.outputsMap.values())output2.clear()}getInputById(id){const item=this.inputsMap.get(id);if(!item)throw new DflowErrorItemNotFound("input",{id});return item}input(position){const pinId=this.inputPosition[position];if(!pinId){throw new DflowErrorItemNotFound("input",{id:this.id,nodeId:this.id,position})}return this.getInputById(pinId)}getOutputById(id){const item=this.outputsMap.get(id);if(!item){throw new DflowErrorItemNotFound("output",{id,nodeId:this.id})}return item}output(position){const pinId=this.outputPosition[position];if(!pinId){throw new DflowErrorItemNotFound("output",{nodeId:this.id,position})}return this.getOutputById(pinId)}run(){}toObject(){const obj={id:this.id,k:this.kind};const inputs=[...this.inputsMap.values()].map(item=>item.toObject());if(inputs.length>0)obj.i=inputs;const outputs=[...this.outputsMap.values()].map(item=>item.toObject());if(outputs.length>0)obj.o=outputs;return obj}}class DflowEdge{constructor({source,target,id}){__publicField(this,"id");__publicField(this,"source");__publicField(this,"target");this.id=id;this.source=source;this.target=target}toObject(){return{id:this.id,s:this.source,t:this.target}}}const _DflowGraph=class{constructor({nodesCatalog}){__publicField(this,"nodesCatalog");__publicField(this,"nodesMap",new Map);__publicField(this,"edgesMap",new Map);__publicField(this,"runStatus",null);__publicField(this,"executionReport",null);this.nodesCatalog=__spreadValues(__spreadValues({},nodesCatalog),coreNodesCatalog)}static childrenOfNodeId(nodeId,nodeConnections){return nodeConnections.filter(({sourceId})=>nodeId===sourceId).map(({targetId})=>targetId)}static parentsOfNodeId(nodeId,nodeConnections){return nodeConnections.filter(({targetId})=>nodeId===targetId).map(({sourceId})=>sourceId)}static ancestorsOfNodeId(nodeId,nodeConnections){const parentsNodeIds=_DflowGraph.parentsOfNodeId(nodeId,nodeConnections);if(parentsNodeIds.length===0)return[];return parentsNodeIds.reduce((accumulator,parentNodeId,index,array)=>{const ancestors=_DflowGraph.ancestorsOfNodeId(parentNodeId,nodeConnections);const result=accumulator.concat(ancestors);return index===array.length-1?[...new Set(array.concat(result))]:result},[])}static levelOfNodeId(nodeId,nodeConnections){const parentsNodeIds=_DflowGraph.parentsOfNodeId(nodeId,nodeConnections);if(parentsNodeIds.length===0)return 0;let maxLevel=0;for(const parentNodeId of parentsNodeIds){const level=_DflowGraph.levelOfNodeId(parentNodeId,nodeConnections);maxLevel=Math.max(level,maxLevel)}return maxLevel+1}get nodeConnections(){return[...this.edgesMap.values()].map(edge=>({sourceId:edge.source[0],targetId:edge.target[0]}))}get nodeIdsInsideFunctions(){const ancestorsOfReturnNodes=[];for(const node of[...this.nodesMap.values()]){if(node.kind==="return"){ancestorsOfReturnNodes.push(_DflowGraph.ancestorsOfNodeId(node.id,this.nodeConnections))}}return[...new Set(ancestorsOfReturnNodes.flat())]}static sortNodesByLevel(nodeIds,nodeConnections){const levelOf={};for(const nodeId of nodeIds){levelOf[nodeId]=_DflowGraph.levelOfNodeId(nodeId,nodeConnections)}return nodeIds.slice().sort((a,b)=>levelOf[a]<=levelOf[b]?-1:1)}async run(){this.runStatus="running";const executionReport={status:this.runStatus,start:new Date().toJSON(),end:new Date().toJSON(),steps:[]};const nodeIdsExcluded=this.nodeIdsInsideFunctions;const nodeIds=_DflowGraph.sortNodesByLevel([...this.nodesMap.keys()].filter(nodeId=>!nodeIdsExcluded.includes(nodeId)),this.nodeConnections);for(const nodeId of nodeIds){const node=this.nodesMap.get(nodeId);try{if(!node.inputsDataAreValid){const error=new DflowErrorInvalidInputData(nodeId);executionReport.steps.push(_DflowGraph.executionNodeInfo(node.toObject(),error.message));node.clearOutputs();continue}if(node.run.constructor.name==="AsyncFunction"){await node.run()}else{node.run()}executionReport.steps.push(_DflowGraph.executionNodeInfo(node.toObject()))}catch(error1){console.error(error1);this.runStatus="failure"}}if(this.runStatus==="running")this.runStatus="success";executionReport.status=this.runStatus;executionReport.end=new Date().toJSON();this.executionReport=executionReport}toObject(){return{nodes:[...this.nodesMap.values()].map(item=>item.toObject()),edges:[...this.edgesMap.values()].map(item=>item.toObject())}}};let DflowGraph=_DflowGraph;__publicField(DflowGraph,"executionNodeInfo",(node,error)=>{return error?__spreadProps(__spreadValues({},node),{error}):node});class DflowHost{constructor(arg){__publicField(this,"graph");__publicField(this,"context");this.graph=new DflowGraph(arg);this.context={}}get executionReport(){return this.graph.executionReport}get edges(){return[...this.graph.edgesMap.values()].map(({id,source,target})=>({id,source,target}))}get nodes(){return[...this.graph.nodesMap.values()].map(item=>item.toObject())}get nodesCatalog(){return this.graph.nodesCatalog}get runStatus(){return this.graph.runStatus}clearGraph(){this.graph.nodesMap.clear();this.graph.edgesMap.clear()}connect(sourceNode,sourcePosition=0){return{to:(targetNode,targetPosition=0)=>{const sourcePin=sourceNode.output(sourcePosition);const targetPin=targetNode.input(targetPosition);this.newEdge({source:[sourceNode.id,sourcePin.id],target:[targetNode.id,targetPin.id]})}}}deleteEdge(edgeId){const edge=this.getEdgeById(edgeId);const[targetNodeId,targetPinId]=edge.target;const targetNode=this.getNodeById(targetNodeId);const targetPin=targetNode.getInputById(targetPinId);targetPin.disconnect();this.graph.edgesMap.delete(edgeId)}deleteNode(nodeId){const node=this.getNodeById(nodeId);for(const edge of this.edges){const{source:[sourceNodeId],target:[targetNodeId]}=edge;if(sourceNodeId===node.id||targetNodeId===node.id){this.deleteEdge(edge.id)}}this.graph.nodesMap.delete(nodeId)}executeFunction(functionId,args){var _a,_b;const nodeConnections=this.graph.nodeConnections;const childrenNodeIds=DflowGraph.childrenOfNodeId(functionId,nodeConnections);const returnNodeIds=[];for(const childrenNodeId of childrenNodeIds){const node=this.getNodeById(childrenNodeId);if(node.kind===DflowNodeReturn.kind){returnNodeIds.push(node.id)}}const nodeIdsInsideFunction=returnNodeIds.reduce((accumulator,returnNodeId,index,array)=>{const ancestors=DflowGraph.ancestorsOfNodeId(returnNodeId,nodeConnections);const result=accumulator.concat(ancestors);return index===array.length?[...new Set(result)]:result},[]);const nodeIds=DflowGraph.sortNodesByLevel([...returnNodeIds,...nodeIdsInsideFunction],nodeConnections);for(const nodeId of nodeIds){const node1=this.getNodeById(nodeId);try{switch(node1.kind){case DflowNodeArgument.kind:{const position=node1.input(0).data;const index=typeof position==="number"&&!isNaN(position)?Math.max(position,0):0;node1.output(0).data=args[index];break}case DflowNodeReturn.kind:{return node1.input(1).data}default:{if(node1.run.constructor.name==="AsyncFunction"){throw new Error("dflow executeFunction() cannot execute async functions")}else{node1.run()}(_b=(_a=this.executionReport)==null?void 0:_a.steps)==null?void 0:_b.push(DflowGraph.executionNodeInfo(node1.toObject()))}}}catch(error){console.error(error)}}}getEdgeById(id){const item=this.graph.edgesMap.get(id);if(!item)throw new DflowErrorItemNotFound("edge",{id});return item}getNodeById(id){const item=this.graph.nodesMap.get(id);if(!item)throw new DflowErrorItemNotFound("node",{id});return item}newNode(arg){var _a,_b,_c,_d,_e;const NodeClass=(_a=this.nodesCatalog[arg.kind])!=null?_a:DflowNodeUnknown;const id=Dflow.isDflowId(arg.id)?arg.id:generateItemId(this.graph.nodesMap,"n");const inputs=(_c=(_b=NodeClass.inputs)==null?void 0:_b.map((definition,i)=>{var _a2,_b2;const obj=(_a2=arg.inputs)==null?void 0:_a2[i];const id2=(_b2=obj==null?void 0:obj.id)!=null?_b2:`i${i}`;return __spreadValues(__spreadValues({id:id2},obj),definition)}))!=null?_c:[];const outputs=(_e=(_d=NodeClass.outputs)==null?void 0:_d.map((definition,i)=>{var _a2,_b2;const obj=(_a2=arg.outputs)==null?void 0:_a2[i];const id2=(_b2=obj==null?void 0:obj.id)!=null?_b2:`o${i}`;return __spreadValues(__spreadValues({id:id2},obj),definition)}))!=null?_e:[];const node=new NodeClass({id,kind:arg.kind,host:this,inputs,outputs});this.graph.nodesMap.set(node.id,node);return node}newEdge(arg){const id=Dflow.isDflowId(arg.id)?arg.id:generateItemId(this.graph.edgesMap,"e");const edge=new DflowEdge(__spreadProps(__spreadValues({},arg),{id}));this.graph.edgesMap.set(edge.id,edge);const[sourceNodeId,sourcePinId]=edge.source;const[targetNodeId,targetPinId]=edge.target;const sourceNode=this.getNodeById(sourceNodeId);const targetNode=this.getNodeById(targetNodeId);const sourcePin=sourceNode.getOutputById(sourcePinId);const targetPin=targetNode.getInputById(targetPinId);targetPin.connectTo(sourcePin);return edge}toObject(){return this.graph.toObject()}async run(){await this.graph.run()}}const{input,output}=DflowNode;class DflowNodeArgument extends DflowNode{}__publicField(DflowNodeArgument,"kind","argument");__publicField(DflowNodeArgument,"inputs",[input("number",{name:"position",optional:true})]);__publicField(DflowNodeArgument,"outputs",[output()]);class DflowNodeData extends DflowNode{constructor(_e){var _f=_e,{outputs}=_f,rest=__objRest(_f,["outputs"]);super(__spreadValues({outputs:outputs==null?void 0:outputs.map(output2=>__spreadProps(__spreadValues({},output2),{types:Dflow.inferDataType(output2.data)}))},rest))}}__publicField(DflowNodeData,"kind","data");__publicField(DflowNodeData,"outputs",[output()]);class DflowNodeFunction extends DflowNode{constructor(arg){super(arg);this.output(0).data=this.id}}__publicField(DflowNodeFunction,"kind","function");__publicField(DflowNodeFunction,"outputs",[output("DflowId",{name:"id"})]);class DflowNodeReturn extends DflowNode{}__publicField(DflowNodeReturn,"kind","return");__publicField(DflowNodeReturn,"inputs",[input("DflowId",{name:"functionId"}),input([],{name:"value"})]);class DflowNodeUnknown extends DflowNode{}const coreNodesCatalog={[DflowNodeArgument.kind]:DflowNodeArgument,[DflowNodeData.kind]:DflowNodeData,[DflowNodeFunction.kind]:DflowNodeFunction,[DflowNodeReturn.kind]:DflowNodeReturn};class DflowErrorCannotConnectPins extends Error{constructor({source,target}){super(`Cannot connect source ${source.join()} to target ${target.join()}`)}}class DflowErrorInvalidInputData extends Error{constructor(nodeId){super(`Invalid input data in node ${nodeId}`)}}class DflowErrorItemNotFound extends Error{constructor(item,{id,nodeId,position}){super(`Not Found ${item} ${[id?`id=${id}`:"",nodeId?`nodeId=${nodeId}`:"",position?`position=${position}`:""].join()}`)}}export{Dflow};export{DflowPin};export{DflowInput};export{DflowOutput};export{DflowNode};export{DflowEdge};export{DflowGraph};export{DflowHost};export{DflowNodeUnknown};export{coreNodesCatalog};export{DflowErrorCannotConnectPins};export{DflowErrorInvalidInputData};export{DflowErrorItemNotFound};
