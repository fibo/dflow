const u=d=>`${d} must be a string`,y=d=>`${d} must be a number`,I=(d,t)=>`${t} pin not found nodeId=${d}`,N=(d,t,e)=>`${I(d,t)} position=${e}`,E=(d,t,e)=>`${I(d,t)} pinId=${e}`;class h{id;kind;types;#t;#e;constructor(t,{id:e,data:s,types:n}){this.kind=t,this.id=e,this.types=n,this.setData(s)}connectTo(t){this.kind==="input"&&(this.#e=t)}disconnect(){this.kind==="input"&&(this.#e=void 0)}getData(){if(this.kind==="output")return this.#t;{const t=this.#e;if(typeof t!="undefined")return t.getData()}}setData(t){const e=this.types??[];if(typeof t!="undefined"){const s=Array.isArray(t),n=t===null,r=typeof t=="object"&&!n&&!s;switch(!0){case typeof this.types=="undefined":case(typeof t=="string"&&e.includes("string")):case(typeof t=="number"&&e.includes("number")):case(typeof t=="boolean"&&e.includes("boolean")):case(n&&e.includes("null")):case(r&&e.includes("object")):case(s&&e.includes("array")):{this.#t=t;break}default:throw new Error(`could not set data pinKind=${this.kind} pinTypes=${JSON.stringify(this.types)} typeof=${typeof t}`)}}}toJSON(){return JSON.stringify(this.toObject())}toObject(){const t={id:this.id};return typeof this.#t!="undefined"&&(t.data=this.#t),t}}class a{id;kind;isAsync;isConstant;inputs=new Map;outputs=new Map;#t=[];#e=[];constructor({id:t,kind:e,inputs:s=[],outputs:n=[]},{isAsync:r=!1,isConstant:o=!1}={}){this.id=t,this.kind=e,this.isAsync=r,this.isConstant=o;for(const i of s)this.newInput(i);for(const i of n)this.newOutput(i)}getInputById(t){if(typeof t!="string")throw new TypeError(u("inputId"));const e=this.inputs.get(t);if(e instanceof h)return e;throw new Error(`DflowPin not found, id=${t}, kind={input}`)}getInputByPosition(t){if(typeof t!="number")throw new TypeError(y("position"));const e=this.#t[t];if(typeof e=="undefined")throw new Error(N(this.id,"input",t));return this.getInputById(e)}getOutputById(t){if(typeof t!="string")throw new TypeError(u("outputId"));const e=this.outputs.get(t);if(e instanceof h)return e;throw new Error(E(this.id,"input",t))}getOutputByPosition(t){if(typeof t!="number")throw new TypeError(y("position"));const e=this.#e[t];if(typeof e=="undefined")throw new Error(N(this.id,"output",t));return this.getOutputById(e)}newInput(t){const e=new h("input",t);this.inputs.set(e.id,e),this.#t.push(e.id)}newOutput(t){const e=new h("output",t);this.outputs.set(e.id,e),this.#e.push(e.id)}run(){throw new Error(`${this.constructor.name} does not implement a run() method`)}toJSON(){return JSON.stringify(this.toObject())}toObject(){const t={id:this.id,kind:this.kind},e=Object.values(this.inputs).map(n=>n.toObject());e.length>0&&(t.inputs=e);const s=Object.values(this.outputs).map(n=>n.toObject());return s.length>0&&(t.outputs=s),t}}class g extends a{static kind="Unknown";constructor(t){super({...t,kind:g.kind})}run(){}}class p{id;source;target;constructor({id:t,source:e,target:s}){this.id=t;const[n,r]=e,[o,i]=s;if(typeof n!="string")throw new TypeError(u("sourceNodeId"));if(typeof r!="string")throw new TypeError(u("sourcePinId"));if(typeof o!="string")throw new TypeError(u("targetNodeId"));if(typeof i!="string")throw new TypeError(u("targetPinId"));this.source=e,this.target=s}toJSON(){return JSON.stringify(this.toObject())}toObject(){return{id:this.id,source:this.source,target:this.target}}}class f{nodes=new Map;edges=new Map;#t="success";static sort(t,e){const s={},n=o=>e.filter(({targetId:i})=>o===i).map(({sourceId:i})=>i),r=o=>{const i=n(o);if(i.length===0)return 0;let c=0;for(const w of i){const l=r(w);c=Math.max(l,c)}return c+1};for(const o of t)s[o]=r(o);return t.slice().sort((o,i)=>s[o]<=s[i]?-1:1)}clear(){this.nodes.clear(),this.edges.clear()}getNodeById(t){if(typeof t!="string")throw new TypeError(u("nodeId"));const e=this.nodes.get(t);if(e instanceof a)return e;throw new Error(`DflowNode not found, id=${t}`)}getEdgeById(t){if(typeof t!="string")throw new TypeError(u("edgeId"));const e=this.edges.get(t);if(e instanceof p)return e;throw new Error(`DflowEdge not found, id=${t}`)}generateEdgeId(t=this.edges.size){const e=`e${t}`;return this.edges.has(e)?this.generateEdgeId(t+1):e}generateNodeId(t=this.nodes.size){const e=`n${t}`;return this.nodes.has(e)?this.generateNodeId(t+1):e}async run(){this.runStatusIsSuccess&&(this.#t="waiting");const t=f.sort([...this.nodes.keys()],[...this.edges.values()].map(e=>({sourceId:e.source[0],targetId:e.target[0]})));for(const e of t){const s=this.nodes.get(e);try{s.isConstant===!1&&(s.isAsync?await s.run():s.run())}catch(n){console.error(n),this.#t="failure"}}this.runStatusIsWaiting&&(this.#t="success")}get runStatusIsSuccess(){return this.#t==="success"}get runStatusIsWaiting(){return this.#t==="waiting"}get runStatusIsFailure(){return this.#t==="failure"}toJSON(){return JSON.stringify(this.toObject())}toObject(){const t=Object.values(this.nodes).map(s=>s.toObject()),e=Object.values(this.edges).map(s=>s.toObject());return{nodes:t,edges:e}}}class O{graph=new f;#t;constructor(t={}){this.#t=t}connect(t,e=0){return{to:(s,n=0)=>{const r=this.graph.generateEdgeId(),o=t.getOutputByPosition(e),i=s.getInputByPosition(n);this.newEdge({id:r,source:[t.id,o.id],target:[s.id,i.id]})}}}deleteEdge(t){if(typeof t!="string")throw new TypeError(u("edgeId"));const e=this.graph.getEdgeById(t);if(e instanceof p){const[s,n]=e.target;this.graph.getNodeById(s).getInputById(n).disconnect(),this.graph.edges.delete(t)}else throw new Error(`DflowEdge not found, id=${t}`)}deleteNode(t){if(typeof t!="string")throw new TypeError(u("nodeId"));const e=this.graph.getNodeById(t);if(e instanceof a){for(const s of this.graph.edges.values()){const{source:[n],target:[r]}=s;(n===e.id||r===e.id)&&this.deleteEdge(s.id)}this.graph.nodes.delete(t)}else throw new Error(`DflowNode not found, id=${t}`)}newNode(t){const e=this.#t[t.kind]??g,s=typeof t.id=="string"?t.id:this.graph.generateNodeId(),n=new e({...t,id:s});if(this.graph.nodes.has(n.id))throw new Error(`Cannot overwrite DflowNode, id=${n.id}`);return this.graph.nodes.set(n.id,n),n}newEdge(t){const e=typeof t.id=="string"?t.id:this.graph.generateEdgeId(),s=new p({...t,id:e});if(this.graph.edges.has(s.id))throw new Error(`Cannot overwrite DflowEdge, id=${s.id}`);this.graph.edges.set(s.id,s);const[n,r]=s.source,[o,i]=s.target,c=this.graph.getNodeById(n),w=this.graph.getNodeById(o),l=c.getOutputById(r);return w.getInputById(i).connectTo(l),s}newInput(t,e){this.graph.getNodeById(t).newInput(e)}newOutput(t,e){this.graph.getNodeById(t).newOutput(e)}}export{h as DflowPin};export{a as DflowNode};export{g as DflowUnknownNode};export{p as DflowEdge};export{f as DflowGraph};export{O as DflowHost};
