const c=d=>`${d} must be a string`,E=d=>`${d} must be a number`,O=(d,t)=>`${t} pin not found nodeId=${d}`,b=(d,t,e)=>`${O(d,t)} position=${e}`,T=(d,t,e)=>`${O(d,t)} pinId=${e}`;class r{static isArray(t){return Array.isArray(t)}static isBoolean(t){return typeof t=="boolean"}static isDflowGraph(t){return typeof t=="object"&&t!==null&&!Array.isArray(t)&&Array.isArray(t.nodes)&&Array.isArray(t.edges)&&l.isDflowGraph(t)}static isObject(t){return!r.isUndefined(t)&&!r.isNull(t)&&!r.isArray(t)&&typeof t=="object"}static isNull(t){return t===null}static isNumber(t){return typeof t=="number"}static isString(t){return typeof t=="string"}static isStringNotEmpty(t){return r.isString(t)&&t.length>0}static isUndefined(t){return typeof t=="undefined"}static validate(t,e){return e.length===0?!0:e.some(s=>{switch(s){case"array":return r.isArray(t);case"boolean":return r.isBoolean(t);case"null":return r.isNull(t);case"number":return r.isNumber(t);case"object":return r.isObject(t);case"string":return r.isString(t);case"DflowGraph":return r.isDflowGraph(t);default:return!1}},!0)}}class h{id;name;static isDflowItem({id:t,name:e}){return typeof t=="string"&&["undefined","string"].includes(typeof e)}constructor({id:t,name:e}){this.id=t,this.name=e}toJSON(){return JSON.stringify(this.toObject())}toObject(){const t={id:this.id};return typeof this.name=="string"&&(t.name=this.name),t}}class a extends h{kind;types;static types=["string","number","boolean","null","object","array","DflowArguments","DflowGraph"];static isDflowPin({types:t=[],...e}){return h.isDflowItem(e)&&t.every(s=>a.isDflowPinType(s))}static isDflowPinType(t){a.types.includes(t)}constructor(t,{types:e=[],...s}){super(s);this.kind=t,this.types=e}get hasTypeAny(){return this.types.length===0}get hasTypeString(){return this.hasTypeAny||this.types.includes("string")}get hasTypeNumber(){return this.hasTypeAny||this.types.includes("number")}get hasTypeBoolean(){return this.hasTypeAny||this.types.includes("boolean")}get hasTypeNull(){return this.hasTypeAny||this.types.includes("null")}get hasTypeObject(){return this.hasTypeAny||this.types.includes("object")}get hasTypeArray(){return this.hasTypeAny||this.types.includes("array")}}class f extends a{#t;static isDflowInput({id:t,types:e}){return a.isDflowPin({id:t,types:e})}constructor(t){super("input",t)}get data(){return this.#t?.data}get isConnected(){return typeof this.#t=="undefined"}connectTo(t){const{hasTypeAny:e,types:s}=this,{types:n}=t;if(e||s.some(i=>n.includes(i)))this.#t=t;else throw new Error(`mismatching pinTypes, source has types [${n.join()}] and target has types [${s.join()}]`)}disconnect(){this.#t=void 0}toObject(){const t={id:this.id};return this.types.length>0&&(t.types=this.types),t}}class w extends a{#t;static isDflowOutput({id:t,data:e,types:s=[]}){return a.isDflowPin({id:t,types:s})&&r.validate(e,s)}constructor({data:t,...e}){super("output",e);this.#t=t}clear(){this.#t=void 0}get data(){return this.#t}set data(t){switch(!0){case r.isUndefined(t):this.clear();break;case this.hasTypeAny:case(r.isString(t)&&this.hasTypeString):case(r.isNumber(t)&&this.hasTypeNumber):case(r.isBoolean(t)&&this.hasTypeBoolean):case(r.isNull(t)&&this.hasTypeNull):case(r.isObject(t)&&this.hasTypeObject):case(r.isArray(t)&&this.hasTypeArray):{this.#t=t;break}default:throw new Error(`could not set data pinTypes=${JSON.stringify(this.types)} typeof=${typeof t}`)}}toObject(){const t={...super.toObject()};return r.isUndefined(this.#t)||(t.data=this.#t),this.types.length>0&&(t.types=this.types),t}}class g extends h{kind;meta;#t=new Map;#e=new Map;#s=[];#n=[];static isDflowNode({kind:t,inputs:e=[],outputs:s=[],...n}){return h.isDflowItem(n)&&r.isStringNotEmpty(t)&&e.every(i=>f.isDflowInput(i))&&s.every(i=>w.isDflowOutput(i))}constructor({kind:t,inputs:e=[],outputs:s=[],...n},{isAsync:i=!1,isConstant:u=!1}={}){super(n);this.kind=t,this.meta={isAsync:i,isConstant:u};for(const o of e)this.newInput(o);for(const o of s)this.newOutput(o)}get inputs(){return this.#t.values()}get outputs(){return this.#e.values()}get numInputs(){return this.#t.size}get numOutputs(){return this.#e.size}generateInputId(t=this.numInputs){const e=`i${t}`;return this.#t.has(e)?this.generateInputId(t+1):e}generateOutputId(t=this.numOutputs){const e=`o${t}`;return this.#e.has(e)?this.generateOutputId(t+1):e}getInputById(t){if(typeof t!="string")throw new TypeError(c("inputId"));const e=this.#t.get(t);if(e instanceof f)return e;throw new Error(T(this.id,"input",t))}getInputByPosition(t){if(typeof t!="number")throw new TypeError(E("position"));const e=this.#s[t];if(r.isUndefined(e))throw new Error(b(this.id,"input",t));return this.getInputById(e)}getOutputById(t){if(typeof t!="string")throw new TypeError(c("outputId"));const e=this.#e.get(t);if(e instanceof w)return e;throw new Error(T(this.id,"output",t))}getOutputByPosition(t){if(typeof t!="number")throw new TypeError(E("position"));const e=this.#n[t];if(r.isUndefined(e))throw new Error(b(this.id,"output",t));return this.getOutputById(e)}deleteInput(t){this.#t.delete(t),this.#s.splice(this.#s.indexOf(t),1)}deleteOutput(t){this.#e.delete(t),this.#n.splice(this.#n.indexOf(t),1)}newInput(t){const e=r.isStringNotEmpty(t.id)?t.id:this.generateInputId(),s=new f({...t,id:e});return this.#t.set(e,s),this.#s.push(e),s}newOutput(t){const e=r.isStringNotEmpty(t.id)?t.id:this.generateOutputId(),s=new w({...t,id:e});return this.#e.set(e,s),this.#n.push(e),s}run(t){throw new Error(`${this.constructor.name} does not implement a run() method`)}toObject(){const t={...super.toObject(),kind:this.kind},e=[],s=[];for(const n of this.inputs)e.push(n.toObject());e.length>0&&(t.inputs=e);for(const n of this.outputs)s.push(n.toObject());return s.length>0&&(t.outputs=s),t}}class I extends g{static kind="Unknown";constructor(t){super({...t,kind:I.kind})}run(){}}class y extends h{source;target;static isDflowEdge({source:t,target:e,...s},n){return h.isDflowItem(s)&&Array.isArray(t)&&t.length===2&&n.nodes.find(({id:i,outputs:u=[]})=>i===t[0]&&u.find(({id:o})=>o===t[1]))&&Array.isArray(e)&&e.length===2&&n.nodes.find(({id:i,inputs:u=[]})=>i===e[0]&&u.find(({id:o})=>o===e[1]))}constructor({source:t,target:e,...s}){super(s);const[n,i]=t,[u,o]=e;if(typeof n!="string")throw new TypeError(c("sourceNodeId"));if(typeof i!="string")throw new TypeError(c("sourcePinId"));if(typeof u!="string")throw new TypeError(c("targetNodeId"));if(typeof o!="string")throw new TypeError(c("targetPinId"));this.source=t,this.target=e}toObject(){return{...super.toObject(),source:this.source,target:this.target}}}class l extends h{#t="success";#e=new Map;#s=new Map;static isDflowGraph(t){return t.nodes.every(e=>g.isDflowNode(e))&&t.edges.every(e=>y.isDflowEdge(e,t))}static sort(t,e){const s={},n=u=>e.filter(({targetId:o})=>u===o).map(({sourceId:o})=>o),i=u=>{const o=n(u);if(o.length===0)return 0;let p=0;for(const N of o){const m=i(N);p=Math.max(m,p)}return p+1};for(const u of t)s[u]=i(u);return t.slice().sort((u,o)=>s[u]<=s[o]?-1:1)}get edges(){return this.#s.values()}get nodes(){return this.#e.values()}get numEdges(){return this.#s.size}get numNodes(){return this.#e.size}get runStatusIsSuccess(){return this.#t==="success"}get runStatusIsWaiting(){return this.#t==="waiting"}get runStatusIsFailure(){return this.#t==="failure"}addEdge(t){if(this.#s.has(t.id))throw new Error(`cannot overwrite edge, id=${t.id}`);this.#s.set(t.id,t)}addNode(t){if(this.#e.has(t.id))throw new Error(`cannot overwrite node, id=${t.id}`);this.#e.set(t.id,t)}clear(){this.#e.clear(),this.#s.clear()}deleteEdge(t){this.#s.delete(t)}deleteNode(t){this.#e.delete(t)}getNodeById(t){if(typeof t!="string")throw new TypeError(c("nodeId"));const e=this.#e.get(t);if(e instanceof g)return e;throw new Error(`DflowNode not found, id=${t}`)}getEdgeById(t){if(typeof t!="string")throw new TypeError(c("edgeId"));const e=this.#s.get(t);if(e instanceof y)return e;throw new Error(`DflowEdge not found, id=${t}`)}generateEdgeId(t=this.numEdges){const e=`e${t}`;return this.#s.has(e)?this.generateEdgeId(t+1):e}generateNodeId(t=this.numNodes){const e=`n${t}`;return this.#e.has(e)?this.generateNodeId(t+1):e}async run(t){this.runStatusIsSuccess&&(this.#t="waiting");const e=l.sort([...this.#e.keys()],[...this.#s.values()].map(s=>({sourceId:s.source[0],targetId:s.target[0]})));for(const s of e){const n=this.#e.get(s);try{n.meta.isConstant===!1&&(n.meta.isAsync?await n.run(t):n.run(t))}catch(i){console.error(i),this.#t="failure"}}this.runStatusIsWaiting&&(this.#t="success")}toObject(){const t={...super.toObject(),nodes:[],edges:[]};for(const e of this.nodes)t.nodes.push(e.toObject());for(const e of this.edges)t.edges.push(e.toObject());return t}}class S{#t;#e;constructor(t={}){this.#e=t,this.#t=new l({id:"g1"})}get numEdges(){return this.#t.numEdges}get numNodes(){return this.#t.numNodes}get nodeKinds(){return Object.keys(this.#e)}get runStatusIsSuccess(){return this.#t.runStatusIsSuccess}get runStatusIsWaiting(){return this.#t.runStatusIsWaiting}get runStatusIsFailure(){return this.#t.runStatusIsFailure}clearGraph(){this.#t.clear()}connect(t,e=0){return{to:(s,n=0)=>{const i=this.#t.generateEdgeId(),u=t.getOutputByPosition(e),o=s.getInputByPosition(n);this.newEdge({id:i,source:[t.id,u.id],target:[s.id,o.id]})}}}deleteEdge(t){if(typeof t!="string")throw new TypeError(c("edgeId"));const e=this.#t.getEdgeById(t);if(e instanceof y){const[s,n]=e.target;this.getNodeById(s).getInputById(n).disconnect(),this.#t.deleteEdge(t)}else throw new Error(`DflowEdge not found, id=${t}`)}deleteNode(t){if(typeof t!="string")throw new TypeError(c("nodeId"));const e=this.getNodeById(t);if(e instanceof g){for(const s of this.#t.edges){const{source:[n],target:[i]}=s;(n===e.id||i===e.id)&&this.deleteEdge(s.id)}this.#t.deleteNode(t)}else throw new Error(`DflowNode not found, id=${t}`)}getEdgeById(t){return this.#t.getEdgeById(t)}getNodeById(t){return this.#t.getNodeById(t)}newNode(t){const e=this.#e[t.kind]??I,s=r.isStringNotEmpty(t.id)?t.id:this.#t.generateNodeId(),n=new e({...t,id:s});return this.#t.addNode(n),n}newEdge(t){const e=r.isStringNotEmpty(t.id)?t.id:this.#t.generateEdgeId(),s=new y({...t,id:e});this.#t.addEdge(s);const[n,i]=s.source,[u,o]=s.target,p=this.#t.getNodeById(n),N=this.#t.getNodeById(u),m=p.getOutputById(i);return N.getInputById(o).connectTo(m),s}newInput(t,e){return this.#t.getNodeById(t).newInput(e)}newOutput(t,e){return this.#t.getNodeById(t).newOutput(e)}toJSON(){return this.#t.toJSON()}toObject(){return this.#t.toObject()}async run(){await this.#t.run(this)}}export{r as DflowData};export{h as DflowItem};export{a as DflowPin};export{f as DflowInput};export{w as DflowOutput};export{g as DflowNode};export{I as DflowUnknownNode};export{y as DflowEdge};export{l as DflowGraph};export{S as DflowHost};
