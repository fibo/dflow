const u=o=>`${o} must be a string`,N=o=>`${o} must be a number`,m=(o,t)=>`${t} pin not found nodeId=${o}`,O=(o,t,e)=>`${m(o,t)} position=${e}`,B=(o,t,e)=>`${m(o,t)} pinId=${e}`;class h{id;kind;types;#t;#e;constructor(t,{id:e,data:s,types:n}){this.kind=t,this.id=e,this.types=n,this.setData(s)}connectTo(t){this.kind==="input"&&(this.#e=t)}disconnect(){this.kind==="input"&&(this.#e=void 0)}getData(){if(this.kind==="output")return this.#t;{const t=this.#e;if(typeof t!="undefined")return t.getData()}}setData(t){const e=this.types??[];if(typeof t!="undefined"){const s=Array.isArray(t),n=t===null,r=typeof t=="object"&&!n&&!s;switch(!0){case typeof this.types=="undefined":case(typeof t=="string"&&e.includes("string")):case(typeof t=="number"&&e.includes("number")):case(typeof t=="boolean"&&e.includes("boolean")):case(n&&e.includes("null")):case(r&&e.includes("object")):case(s&&e.includes("array")):{this.#t=t;break}default:throw new Error(`could not set data pinKind=${this.kind} pinTypes=${JSON.stringify(this.types)} typeof=${typeof t}`)}}}toJSON(){return JSON.stringify(this.toObject())}toObject(){const t={id:this.id};return typeof this.#t!="undefined"&&(t.data=this.#t),t}}class c{id;kind;isAsync;inputs=new Map;outputs=new Map;#t=[];#e=[];constructor({id:t,kind:e,inputs:s=[],outputs:n=[]},r=!1){this.id=t,this.kind=e,this.isAsync=r;for(const i of s)this.newInput(i);for(const i of n)this.newOutput(i)}getInputById(t){if(typeof t!="string")throw new TypeError(u("inputId"));const e=this.inputs.get(t);if(e instanceof h)return e;throw new Error(`DflowPin not found, id=${t}, kind={input}`)}getInputByPosition(t){if(typeof t!="number")throw new TypeError(N("position"));const e=this.#t[t];if(typeof e=="undefined")throw new Error(O(this.id,"input",t));return this.getInputById(e)}getOutputById(t){if(typeof t!="string")throw new TypeError(u("outputId"));const e=this.outputs.get(t);if(e instanceof h)return e;throw new Error(B(this.id,"input",t))}getOutputByPosition(t){if(typeof t!="number")throw new TypeError(N("position"));const e=this.#e[t];if(typeof e=="undefined")throw new Error(O(this.id,"output",t));return this.getOutputById(e)}newInput(t){const e=new h("input",t);this.inputs.set(e.id,e),this.#t.push(e.id)}newOutput(t){const e=new h("output",t);this.outputs.set(e.id,e),this.#e.push(e.id)}run(){throw new Error(`${this.constructor.name} does not implement a run() method`)}toJSON(){return JSON.stringify(this.toObject())}toObject(){const t={id:this.id,kind:this.kind},e=Object.values(this.inputs).map(n=>n.toObject());e.length>0&&(t.inputs=e);const s=Object.values(this.outputs).map(n=>n.toObject());return s.length>0&&(t.outputs=s),t}}class p extends c{static kind="Unknown";constructor(t){super({...t,kind:p.kind})}run(){}}class g{id;source;target;constructor({id:t,source:e,target:s}){this.id=t;const[n,r]=e,[i,d]=s;if(typeof n!="string")throw new TypeError(u("sourceNodeId"));if(typeof r!="string")throw new TypeError(u("sourcePinId"));if(typeof i!="string")throw new TypeError(u("targetNodeId"));if(typeof d!="string")throw new TypeError(u("targetPinId"));this.source=e,this.target=s}toJSON(){return JSON.stringify(this.toObject())}toObject(){return{id:this.id,source:this.source,target:this.target}}}class f{nodes=new Map;edges=new Map;#t="success";static sort(t,e){const s={},n=i=>e.filter(({targetId:d})=>i===d).map(({sourceId:d})=>d),r=i=>{const d=n(i);if(d.length===0)return 0;let a=0;for(const w of d){const I=r(w);a=Math.max(I,a)}return a+1};for(const i of t)s[i]=r(i);return t.slice().sort((i,d)=>s[i]<=s[d]?-1:1)}clear(){this.nodes.clear(),this.edges.clear()}getNodeById(t){if(typeof t!="string")throw new TypeError(u("nodeId"));const e=this.nodes.get(t);if(e instanceof c)return e;throw new Error(`DflowNode not found, id=${t}`)}getEdgeById(t){if(typeof t!="string")throw new TypeError(u("edgeId"));const e=this.edges.get(t);if(e instanceof g)return e;throw new Error(`DflowEdge not found, id=${t}`)}async run(){this.runStatusIsSuccess&&(this.#t="waiting");const t=f.sort([...this.nodes.keys()],[...this.edges.values()].map(e=>({sourceId:e.source[0],targetId:e.target[0]})));for(const e of t){const s=this.nodes.get(e);try{s.isAsync?await s.run():s.run()}catch(n){console.error(n),this.#t="failure"}}this.runStatusIsWaiting&&(this.#t="success")}get runStatusIsSuccess(){return this.#t==="success"}get runStatusIsWaiting(){return this.#t==="waiting"}get runStatusIsFailure(){return this.#t==="failure"}toJSON(){return JSON.stringify(this.toObject())}toObject(){const t=Object.values(this.nodes).map(s=>s.toObject()),e=Object.values(this.edges).map(s=>s.toObject());return{nodes:t,edges:e}}}class ${graph=new f;#t;constructor(t={}){this.#t=t}connect(t,e=0){return{to:(s,n=0)=>{const r=`e${this.graph.edges.size+1}`,i=t.getOutputByPosition(e),d=s.getInputByPosition(n);this.newEdge({id:r,source:[t.id,i.id],target:[s.id,d.id]})}}}deleteEdge(t){if(typeof t!="string")throw new TypeError(u("edgeId"));const e=this.graph.getEdgeById(t);if(e instanceof g){const[s,n]=e.target;this.graph.getNodeById(s).getInputById(n).disconnect(),this.graph.edges.delete(t)}else throw new Error(`DflowEdge not found, id=${t}`)}deleteNode(t){if(typeof t!="string")throw new TypeError(u("nodeId"));const e=this.graph.getNodeById(t);if(e instanceof c){for(const s of this.graph.edges.values()){const{source:[n],target:[r]}=s;(n===e.id||r===e.id)&&this.deleteEdge(s.id)}this.graph.nodes.delete(t)}else throw new Error(`DflowNode not found, id=${t}`)}newNode(t){const e=this.#t[t.kind]??p,s=new e(t);if(this.graph.nodes.has(s.id))throw new Error(`Cannot overwrite DflowNode, id=${s.id}`);return this.graph.nodes.set(s.id,s),s}newEdge(t){const e=new g(t);if(this.graph.edges.has(e.id))throw new Error(`Cannot overwrite DflowEdge, id=${e.id}`);this.graph.edges.set(e.id,e);const[s,n]=e.source,[r,i]=e.target,d=this.graph.getNodeById(s),a=this.graph.getNodeById(r),w=d.getOutputById(n);return a.getInputById(i).connectTo(w),e}newInput(t,e){this.graph.nodes.get(t)?.newInput(e)}newOutput(t,e){this.graph.nodes.get(t)?.newOutput(e)}}export{h as DflowPin};export{c as DflowNode};export{p as DflowUnknownNode};export{g as DflowEdge};export{f as DflowGraph};export{$ as DflowHost};const j=()=>({id:"in",types:["number"]}),y=o=>({id:"out",types:["number"],data:o});class l extends c{constructor(t){super({...t,inputs:[j()],outputs:[y()]})}operation(t){throw new Error(`Unimplemented operation nodeKind=${this.kind}`)}run(){const t=this.getInputByPosition(0).getData();if(typeof t=="number"){const e=this.operation(t);this.getOutputByPosition(0).setData(e)}}}class E extends c{static kind="num";constructor(t){super({...t,outputs:[y()]})}run(){}}const x={[E.kind]:E};class P extends l{static kind="mathCos";operation(t){return Math.cos(t)}}class b extends l{static kind="mathCosh";operation(t){return Math.cosh(t)}}class k extends c{static kind="mathPI";constructor(t){super({...t,outputs:[y(Math.PI)]})}}class D extends l{static kind="mathSin";operation(t){return Math.sin(t)}}class S extends l{static kind="mathSinh";operation(t){return Math.sinh(t)}}const M={[P.kind]:P,[b.kind]:b,[k.kind]:k,[D.kind]:D,[S.kind]:S},T={...x,...M};export{T as catalog};
