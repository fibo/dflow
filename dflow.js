const c=n=>`${n} must be a string`,B=n=>`${n} must be a number`,P=(n,t)=>`${t} pin not found nodeId=${n}`,j=(n,t,e)=>`${P(n,t)} position=${e}`,S=(n,t,e)=>`${P(n,t)} pinId=${e}`;class i{static isArray(t){return Array.isArray(t)}static isBoolean(t){return typeof t=="boolean"}static isDflowGraph(t){return typeof t=="object"&&t!==null&&!Array.isArray(t)&&Array.isArray(t.nodes)&&Array.isArray(t.edges)&&I.isDflowGraph(t)}static isObject(t){return!i.isUndefined(t)&&!i.isNull(t)&&!i.isArray(t)&&typeof t=="object"}static isNull(t){return t===null}static isNumber(t){return typeof t=="number"}static isString(t){return typeof t=="string"}static isStringNotEmpty(t){return i.isString(t)&&t.length>0}static isUndefined(t){return typeof t=="undefined"}static validate(t,e){return e.length===0?!0:e.some(s=>{switch(s){case"array":return i.isArray(t);case"boolean":return i.isBoolean(t);case"null":return i.isNull(t);case"number":return i.isNumber(t);case"object":return i.isObject(t);case"string":return i.isString(t);case"DflowGraph":return i.isDflowGraph(t);default:return!1}},!0)}}class h{id;name;static isDflowItem({id:t,name:e}){return typeof t=="string"&&["undefined","string"].includes(typeof e)}constructor({id:t,name:e}){this.id=t,this.name=e}toJSON(){return JSON.stringify(this.toObject())}toObject(){const t={id:this.id};return typeof this.name=="string"&&(t.name=this.name),t}}class l extends h{kind;types;static types=["string","number","boolean","null","object","array","DflowGraph"];static isDflowPin({types:t=[],...e}){return h.isDflowItem(e)&&t.every(s=>l.isDflowPinType(s))}static isDflowPinType(t){l.types.includes(t)}constructor(t,{id:e,types:s=[]}){super({id:e});this.kind=t,this.types=s}get hasTypeAny(){return this.types.length===0}get hasTypeString(){return this.hasTypeAny||this.types.includes("string")}get hasTypeNumber(){return this.hasTypeAny||this.types.includes("number")}get hasTypeBoolean(){return this.hasTypeAny||this.types.includes("boolean")}get hasTypeNull(){return this.hasTypeAny||this.types.includes("null")}get hasTypeObject(){return this.hasTypeAny||this.types.includes("object")}get hasTypeArray(){return this.hasTypeAny||this.types.includes("array")}}class O extends l{#t;static isDflowInput({id:t,types:e}){return l.isDflowPin({id:t,types:e})}constructor(t){super("input",t)}connectTo(t){this.#t=t}disconnect(){this.#t=void 0}get data(){return this.#t?.data}toObject(){const t={id:this.id};return this.types.length>0&&(t.types=this.types),t}}class m extends l{#t;static isDflowOutput({id:t,data:e,types:s=[]}){return l.isDflowPin({id:t,types:s})&&i.validate(e,s)}constructor({data:t,...e}){super("output",e);this.#t=t}clear(){this.#t=void 0}get data(){return this.#t}set data(t){switch(!0){case i.isUndefined(t):this.clear();break;case this.hasTypeAny:case(i.isString(t)&&this.hasTypeString):case(i.isNumber(t)&&this.hasTypeNumber):case(i.isBoolean(t)&&this.hasTypeBoolean):case(i.isNull(t)&&this.hasTypeNull):case(i.isObject(t)&&this.hasTypeObject):case(i.isArray(t)&&this.hasTypeArray):{this.#t=t;break}default:throw new Error(`could not set data pinTypes=${JSON.stringify(this.types)} typeof=${typeof t}`)}}toObject(){const t={...super.toObject()};return i.isUndefined(this.#t)||(t.data=this.#t),this.types.length>0&&(t.types=this.types),t}}class d extends h{kind;meta;inputs=new Map;outputs=new Map;#t=[];#e=[];static isDflowNode({kind:t,inputs:e=[],outputs:s=[],...r}){return h.isDflowItem(r)&&typeof t=="string"&&e.every(o=>O.isDflowInput(o))&&s.every(o=>m.isDflowOutput(o))}constructor({kind:t,inputs:e=[],outputs:s=[],...r},{isAsync:o=!1,isConstant:u=!1}={}){super(r);this.kind=t,this.meta={isAsync:o,isConstant:u};for(const a of e)this.newInput(a);for(const a of s)this.newOutput(a)}generateInputId(t=this.inputs.size){const e=`i${t}`;return this.inputs.has(e)?this.generateInputId(t+1):e}generateOutputId(t=this.outputs.size){const e=`o${t}`;return this.outputs.has(e)?this.generateOutputId(t+1):e}getInputById(t){if(typeof t!="string")throw new TypeError(c("inputId"));const e=this.inputs.get(t);if(e instanceof O)return e;throw new Error(S(this.id,"input",t))}getInputByPosition(t){if(typeof t!="number")throw new TypeError(B("position"));const e=this.#t[t];if(typeof e=="undefined")throw new Error(j(this.id,"input",t));return this.getInputById(e)}getOutputById(t){if(typeof t!="string")throw new TypeError(c("outputId"));const e=this.outputs.get(t);if(e instanceof m)return e;throw new Error(S(this.id,"output",t))}getOutputByPosition(t){if(typeof t!="number")throw new TypeError(B("position"));const e=this.#e[t];if(typeof e=="undefined")throw new Error(j(this.id,"output",t));return this.getOutputById(e)}newInput(t){const e=i.isStringNotEmpty(t.id)?t.id:this.generateInputId(),s=new O({...t,id:e});return this.storeInput(s),s}newOutput(t){const e=i.isStringNotEmpty(t.id)?t.id:this.generateOutputId(),s=new m({...t,id:e});return this.storeOutput(s),s}run(){throw new Error(`${this.constructor.name} does not implement a run() method`)}storeInput(t){this.inputs.set(t.id,t),this.#t.push(t.id)}storeOutput(t){this.outputs.set(t.id,t),this.#e.push(t.id)}toObject(){const t={...super.toObject(),kind:this.kind},e=[],s=[];for(const r of this.inputs.values())e.push(r.toObject());e.length>0&&(t.inputs=e);for(const r of this.outputs.values())s.push(r.toObject());return s.length>0&&(t.outputs=s),t}}class b extends d{static kind="Unknown";constructor(t){super({...t,kind:b.kind})}run(){}}class k extends h{source;target;static isDflowEdge({source:t,target:e,...s},r){return h.isDflowItem(s)&&Array.isArray(t)&&t.length===2&&r.nodes.find(({id:o,outputs:u=[]})=>o===t[0]&&u.find(({id:a})=>a===t[1]))&&Array.isArray(e)&&e.length===2&&r.nodes.find(({id:o,inputs:u=[]})=>o===e[0]&&u.find(({id:a})=>a===e[1]))}constructor({source:t,target:e,...s}){super(s);const[r,o]=t,[u,a]=e;if(typeof r!="string")throw new TypeError(c("sourceNodeId"));if(typeof o!="string")throw new TypeError(c("sourcePinId"));if(typeof u!="string")throw new TypeError(c("targetNodeId"));if(typeof a!="string")throw new TypeError(c("targetPinId"));this.source=t,this.target=e}toObject(){return{...super.toObject(),source:this.source,target:this.target}}}class I extends h{#t="success";nodes=new Map;edges=new Map;static isDflowGraph(t){return t.nodes.every(e=>d.isDflowNode(e))&&t.edges.every(e=>k.isDflowEdge(e,t))}static sort(t,e){const s={},r=u=>e.filter(({targetId:a})=>u===a).map(({sourceId:a})=>a),o=u=>{const a=r(u);if(a.length===0)return 0;let w=0;for(const x of a){const A=o(x);w=Math.max(A,w)}return w+1};for(const u of t)s[u]=o(u);return t.slice().sort((u,a)=>s[u]<=s[a]?-1:1)}clear(){this.nodes.clear(),this.edges.clear()}getNodeById(t){if(typeof t!="string")throw new TypeError(c("nodeId"));const e=this.nodes.get(t);if(e instanceof d)return e;throw new Error(`DflowNode not found, id=${t}`)}getEdgeById(t){if(typeof t!="string")throw new TypeError(c("edgeId"));const e=this.edges.get(t);if(e instanceof k)return e;throw new Error(`DflowEdge not found, id=${t}`)}generateEdgeId(t=this.edges.size){const e=`e${t}`;return this.edges.has(e)?this.generateEdgeId(t+1):e}generateNodeId(t=this.nodes.size){const e=`n${t}`;return this.nodes.has(e)?this.generateNodeId(t+1):e}async run(){this.runStatusIsSuccess&&(this.#t="waiting");const t=I.sort([...this.nodes.keys()],[...this.edges.values()].map(e=>({sourceId:e.source[0],targetId:e.target[0]})));for(const e of t){const s=this.nodes.get(e);try{s.meta.isConstant===!1&&(s.meta.isAsync?await s.run():s.run())}catch(r){console.error(r),this.#t="failure"}}this.runStatusIsWaiting&&(this.#t="success")}get runStatusIsSuccess(){return this.#t==="success"}get runStatusIsWaiting(){return this.#t==="waiting"}get runStatusIsFailure(){return this.#t==="failure"}toObject(){const t={...super.toObject(),nodes:[],edges:[]};for(const e of this.nodes.values())t.nodes.push(e.toObject());for(const e of this.edges.values())t.edges.push(e.toObject());return t}}class dt{graph;#t;constructor(t={}){this.#t=t,this.graph=new I({id:"g1"})}connect(t,e=0){return{to:(s,r=0)=>{const o=this.graph.generateEdgeId(),u=t.getOutputByPosition(e),a=s.getInputByPosition(r);this.newEdge({id:o,source:[t.id,u.id],target:[s.id,a.id]})}}}deleteEdge(t){if(typeof t!="string")throw new TypeError(c("edgeId"));const e=this.graph.getEdgeById(t);if(e instanceof k){const[s,r]=e.target;this.graph.getNodeById(s).getInputById(r).disconnect(),this.graph.edges.delete(t)}else throw new Error(`DflowEdge not found, id=${t}`)}deleteNode(t){if(typeof t!="string")throw new TypeError(c("nodeId"));const e=this.graph.getNodeById(t);if(e instanceof d){for(const s of this.graph.edges.values()){const{source:[r],target:[o]}=s;(r===e.id||o===e.id)&&this.deleteEdge(s.id)}this.graph.nodes.delete(t)}else throw new Error(`DflowNode not found, id=${t}`)}newNode(t){const e=this.#t[t.kind]??b,s=i.isStringNotEmpty(t.id)?t.id:this.graph.generateNodeId(),r=new e({...t,id:s});if(this.graph.nodes.has(r.id))throw new Error(`Cannot overwrite DflowNode, id=${r.id}`);return this.graph.nodes.set(r.id,r),r}newEdge(t){const e=i.isStringNotEmpty(t.id)?t.id:this.graph.generateEdgeId(),s=new k({...t,id:e});if(this.graph.edges.has(s.id))throw new Error(`Cannot overwrite DflowEdge, id=${s.id}`);this.graph.edges.set(s.id,s);const[r,o]=s.source,[u,a]=s.target,w=this.graph.getNodeById(r),x=this.graph.getNodeById(u),A=w.getOutputById(o);return x.getInputById(a).connectTo(A),s}newInput(t,e){return this.graph.getNodeById(t).newInput(e)}newOutput(t,e){return this.graph.getNodeById(t).newOutput(e)}}export{i as DflowData};export{h as DflowItem};export{l as DflowPin};export{O as DflowInput};export{m as DflowOutput};export{d as DflowNode};export{b as DflowUnknownNode};export{k as DflowEdge};export{I as DflowGraph};export{dt as DflowHost};const p=(n,t)=>`unimplemented method ${n} nodeKind=${t}`,ct=()=>({id:"i1"}),pt=()=>({id:"o1"}),ht=()=>({id:"i1",types:["array"]}),v=n=>({id:"o1",types:["array"],data:n}),lt=()=>({id:"i1",types:["boolean"]}),g=n=>({id:"o1",types:["boolean"],data:n}),gt=()=>({id:"i1",types:["object"]}),ft=n=>({id:"o1",types:["object"],data:n}),$=()=>({id:"i1",types:["number"]}),y=n=>({id:"o1",types:["number"],data:n}),yt=()=>({id:"i1",types:["string"]}),wt=n=>({id:"o1",types:["string"],data:n}),M=()=>[{id:"1i",types:["boolean"]},{id:"i2",types:["boolean"]}],C=()=>[{id:"1i",types:["number"]},{id:"i2",types:["number"]}];class f extends d{get input(){return this.getInputByPosition(0)}get output(){return this.getOutputByPosition(0)}run(){const{input:{data:t,types:e},output:s,task:r}=this;i.isUndefined(t)?s.clear():i.validate(t,e)&&(s.data=r(t))}task(t){throw new Error(p("task",this.kind))}}class kt extends f{constructor(t){super({...t,inputs:[ct()],outputs:[g()]})}task(t){throw new Error(p("task",this.kind))}}class It extends f{constructor(t){super({...t,inputs:[ht()],outputs:[y()]})}task(t){throw new Error(p("task",this.kind))}}class G extends f{constructor(t){super({...t,inputs:[gt()],outputs:[v()]})}task(t){throw new Error(p("task",this.kind))}}class U extends f{constructor(t){super({...t,inputs:[$()],outputs:[g()]})}task(t){throw new Error(p("task",this.kind))}}class N extends f{constructor(t){super({...t,inputs:[$()],outputs:[y()]})}task(t){throw new Error(p("task",this.kind))}}class T extends f{constructor(t){super({...t,inputs:[yt()],outputs:[y()]})}task(t){throw new Error(p("task",this.kind))}}class D extends d{get input1(){return this.getInputByPosition(0)}get input2(){return this.getInputByPosition(1)}get output(){return this.getOutputByPosition(0)}run(){const{input1:{data:t,types:e},input2:{data:s,types:r},output:o,task:u}=this;i.isUndefined(t)||i.isUndefined(s)?o.clear():i.validate(t,e)&&i.validate(s,r)&&(o.data=u(t,s))}task(t,e){throw new Error(p("task",this.kind))}}class Ot extends D{constructor(t){super({...t,inputs:C(),outputs:[g()]})}task(t,e){throw new Error(p("task",this.kind))}}class mt extends D{constructor(t){super({...t,inputs:C(),outputs:[y()]})}task(t,e){throw new Error(p("task",this.kind))}}class L extends It{static kind="arrayLength";task(t){return t.length}}const bt={[L.kind]:L};class F extends d{static kind="data";constructor(t){super({...t,outputs:[pt()]})}run(){}}class z extends d{static kind="array";constructor(t){super({...t,outputs:[v()]})}run(){}}class J extends d{static kind="boolean";constructor(t){super({...t,outputs:[g()]})}run(){}}class K extends d{static kind="number";constructor(t){super({...t,outputs:[y()]})}run(){}}class _ extends d{static kind="object";constructor(t){super({...t,outputs:[ft()]})}run(){}}class H extends d{static kind="string";constructor(t){super({...t,outputs:[wt()]})}run(){}}const Nt={[F.kind]:F,[z.kind]:z,[J.kind]:J,[K.kind]:K,[_.kind]:_,[H.kind]:H};class V extends D{static kind="logicAnd";constructor(t){super({...t,inputs:M(),outputs:[g()]})}task(t,e){return t&&e}}class W extends f{static kind="logicNot";constructor(t){super({...t,inputs:[lt()],outputs:[g()]})}task(t){return!t}}class q extends D{static kind="logicOr";constructor(t){super({...t,inputs:M(),outputs:[g()]})}task(t,e){return t||e}}const Dt={[V.kind]:V,[W.kind]:W,[q.kind]:q};class Q extends N{static kind="mathCos";task(t){return Math.cos(t)}}class R extends N{static kind="mathCosh";task(t){return Math.cosh(t)}}class E extends d{static kind="mathPI";static metadata={isConstant:!0};constructor(t){super({...t,outputs:[y(Math.PI)]},E.metadata)}}class X extends N{static kind="mathSin";task(t){return Math.sin(t)}}class Y extends N{static kind="mathSinh";task(t){return Math.sinh(t)}}class Z extends mt{static kind="mathSum";task(t,e){return t+e}}const Et={[Q.kind]:Q,[R.kind]:R,[E.kind]:E,[X.kind]:X,[Y.kind]:Y,[Z.kind]:Z};class tt extends U{static kind="isFinite";task(t){return Number.isFinite(t)}}class et extends Ot{static kind="isGreaterThen";task(t,e){return t>e}}class st extends U{static kind="isInteger";task(t){return Number.isInteger(t)}}class nt extends kt{static kind="isNaN";task(t){return Number.isNaN(t)}}class rt extends T{static kind="parseFloat";task(t){return Number.parseFloat(t)}}class it extends T{static kind="parseInt";task(t){return Number.parseInt(t)}}const xt={[tt.kind]:tt,[st.kind]:st,[et.kind]:et,[nt.kind]:nt,[rt.kind]:rt,[it.kind]:it};class ot extends G{static kind="objectKeys";task(t){return Object.keys(t)}}class ut extends G{static kind="objectValues";task(t){return Object.values(t)}}const At={[ot.kind]:ot,[ut.kind]:ut};class at extends T{static kind="stringLength";task(t){return t.length}}const Tt={[at.kind]:at},Bt={...bt,...Nt,...Dt,...Et,...xt,...At,...Tt};export{Bt as catalog};
