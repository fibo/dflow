var __defProp=Object.defineProperty;var __defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __spreadValues=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop])}return a};var __spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __objRest=(source,exclude)=>{var target={};for(var prop in source)if(__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0)target[prop]=source[prop];if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source)){if(exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop))target[prop]=source[prop]}return target};var __publicField=(obj,key,value)=>{__defNormalProp(obj,typeof key!=="symbol"?key+"":key,value);return value};var __accessCheck=(obj,member,msg)=>{if(!member.has(obj))throw TypeError("Cannot "+msg)};var __privateGet=(obj,member,getter)=>{__accessCheck(obj,member,"read from private field");return getter?getter.call(obj):member.get(obj)};var __privateAdd=(obj,member,value)=>{if(member.has(obj))throw TypeError("Cannot add the same private member more than once");member instanceof WeakSet?member.add(obj):member.set(obj,value)};var __privateSet=(obj,member,value,setter)=>{__accessCheck(obj,member,"write to private field");setter?setter.call(obj,value):member.set(obj,value);return value};var __privateMethod=(obj,member,method)=>{__accessCheck(obj,member,"access private method");return method};var _multi,_optional,_source,_sources,_data,_inputs,_outputs,_inputPosition,_outputPosition,_nodeIdsInsideFunctions,nodeIdsInsideFunctions_fn,_graph,_generateInputIds,generateInputIds_fn,_generateOutputIds,generateOutputIds_fn;class DflowErrorItemNotFound extends Error{constructor(kind,id){super(`${kind} not found id=${id}`)}}const _missingString=stringName=>`${stringName} must be a string`;const _missingPin=(nodeId,kind)=>`${kind} pin not found nodeId=${nodeId}`;const _missingPinAtPosition=(nodeId,kind,position)=>`${_missingPin(nodeId,kind)} position=${position}`;const _executionNodeInfo=({id:id1,kind,outputs},error)=>{const obj={id:id1,kind,outputs:outputs==null?void 0:outputs.map(({id,data,name})=>({id,data,name}))};if(error){obj.error=error}return obj};class DflowData{static isArray(data){if(!Array.isArray(data))return false;return true}static isBoolean(data){return typeof data==="boolean"}static isDflowId(data){return DflowData.isStringNotEmpty(data)}static isObject(data){if(typeof data!=="object"||!data||Array.isArray(data))return false;return true}static isNumber(data){return typeof data==="number"&&!isNaN(data)}static isString(data){return typeof data==="string"}static isStringNotEmpty(data){return DflowData.isString(data)&&data!==""}static validate(data,types){if(types.length===0){return true}return types.some(pinType=>{switch(pinType){case"array":return DflowData.isArray(data);case"boolean":return DflowData.isBoolean(data);case"number":return DflowData.isNumber(data);case"object":return DflowData.isObject(data);case"string":return DflowData.isString(data);case"DflowId":return DflowData.isDflowId(data);default:return false}},true)}}class DflowItem{constructor({id,name}){__publicField(this,"id");__publicField(this,"name");this.id=id;this.name=name}toObject(){const obj={id:this.id};if(typeof this.name==="string"){obj.name=this.name}return obj}}class DflowPin extends DflowItem{constructor(kind,_a){var _b=_a,{types=[]}=_b,pin=__objRest(_b,["types"]);super(pin);__publicField(this,"kind");__publicField(this,"types");this.kind=kind;this.types=types}get hasTypeAny(){return this.types.length===0}hasType(type){return this.hasTypeAny||this.types.includes(type)}toObject(){const obj=super.toObject();if(this.types.length>0){obj.types=this.types}return obj}}__publicField(DflowPin,"types",["string","number","boolean","object","array","DflowId"]);class DflowInput extends DflowPin{constructor(_c){var _d=_c,{multi,optional}=_d,pin=__objRest(_d,["multi","optional"]);super("input",pin);__privateAdd(this,_multi,void 0);__privateAdd(this,_optional,void 0);__privateAdd(this,_source,void 0);__privateAdd(this,_sources,void 0);__privateSet(this,_multi,multi);__privateSet(this,_optional,optional)}get data(){var _a,_b;if(__privateGet(this,_multi)){const sources=Array.from((_a=__privateGet(this,_sources))!=null?_a:[]);return sources.length?sources.map(output12=>output12.data):void 0}else{return(_b=__privateGet(this,_source))==null?void 0:_b.data}}get isConnected(){var _a;return __privateGet(this,_multi)?Array.from((_a=__privateGet(this,_sources))!=null?_a:[]).length>0:typeof __privateGet(this,_source)==="undefined"}get isMulti(){return __privateGet(this,_multi)}get isOptional(){return __privateGet(this,_optional)}connectTo(pin){const{hasTypeAny:targetHasTypeAny,types:targetTypes}=this;const{types:sourceTypes}=pin;const canConnect=targetHasTypeAny||targetTypes.some(pinType=>sourceTypes.includes(pinType));if(canConnect){if(__privateGet(this,_multi)){if(!__privateGet(this,_sources)){__privateSet(this,_sources,new Set)}__privateGet(this,_sources).add(pin)}else{__privateSet(this,_source,pin)}}else{throw new Error(`mismatching pinTypes, source has types [${sourceTypes.join()}] and target has types [${targetTypes.join()}]`)}}disconnect(){var _a;__privateGet(this,_multi)?(_a=__privateGet(this,_sources))==null?void 0:_a.clear():__privateSet(this,_source,void 0)}toObject(){return super.toObject()}}_multi=new WeakMap;_optional=new WeakMap;_source=new WeakMap;_sources=new WeakMap;class DflowOutput extends DflowPin{constructor(_e){var _f=_e,{data}=_f,pin=__objRest(_f,["data"]);super("output",pin);__privateAdd(this,_data,void 0);__privateSet(this,_data,data)}clear(){__privateSet(this,_data,void 0)}get data(){return __privateGet(this,_data)}set data(data){switch(true){case typeof data==="undefined":this.clear();break;case this.hasTypeAny:case(this.hasType("string")&&DflowData.isString(data)):case(this.hasType("number")&&DflowData.isNumber(data)):case(this.hasType("boolean")&&DflowData.isBoolean(data)):case(this.hasType("object")&&DflowData.isObject(data)):case(this.hasType("array")&&DflowData.isArray(data)):case(this.hasType("DflowId")&&DflowData.isDflowId(data)):{__privateSet(this,_data,data);break}default:{throw new Error(`could not set data pinTypes=${JSON.stringify(this.types)} typeof data is ${typeof data}`)}}}toObject(){const obj=super.toObject();if(typeof __privateGet(this,_data)!=="undefined"){obj.data=__privateGet(this,_data)}return obj}}_data=new WeakMap;class DflowNode extends DflowItem{constructor(_g,host,{isAsync=false,isConstant=false}={}){var _h=_g,{kind,inputs=[],outputs=[]}=_h,item=__objRest(_h,["kind","inputs","outputs"]);super(item);__privateAdd(this,_inputs,new Map);__privateAdd(this,_outputs,new Map);__privateAdd(this,_inputPosition,[]);__privateAdd(this,_outputPosition,[]);__publicField(this,"kind");__publicField(this,"meta");__publicField(this,"host");this.host=host;this.kind=kind;this.meta={isAsync,isConstant};for(const pin of inputs){this.newInput(pin)}for(const pin1 of outputs){this.newOutput(pin1)}}static input(typing=[],rest){if(typeof typing==="string"){return __spreadValues({types:[typing]},rest)}return __spreadValues({types:typing},rest)}static output(typing=[],rest){if(typeof typing==="string"){return __spreadValues({types:[typing]},rest)}return __spreadValues({types:typing},rest)}get inputs(){return __privateGet(this,_inputs).values()}get outputs(){return __privateGet(this,_outputs).values()}clearOutputs(){for(const output22 of this.outputs){output22.clear()}}getInputById(id){const item=__privateGet(this,_inputs).get(id);if(!item){throw new DflowErrorItemNotFound("input",id)}return item}input(position){const pinId=__privateGet(this,_inputPosition)[position];if(!pinId){throw new Error(_missingPinAtPosition(this.id,"input",position))}return this.getInputById(pinId)}getOutputById(id){const item=__privateGet(this,_outputs).get(id);if(!item){throw new DflowErrorItemNotFound("output",id)}return item}output(position){const pinId=__privateGet(this,_outputPosition)[position];if(!pinId){throw new Error(_missingPinAtPosition(this.id,"output",position))}return this.getOutputById(pinId)}deleteInput(pinId){this.host.deleteEdgesConnectedToPin([this.id,pinId]);__privateGet(this,_inputs).delete(pinId);__privateGet(this,_inputPosition).splice(__privateGet(this,_inputPosition).indexOf(pinId),1)}deleteOutput(pinId){this.host.deleteEdgesConnectedToPin([this.id,pinId]);__privateGet(this,_outputs).delete(pinId);__privateGet(this,_outputPosition).splice(__privateGet(this,_outputPosition).indexOf(pinId),1)}newInput(obj){const numInputs=__privateGet(this,_inputs).size;const generateInputId=(i=numInputs)=>{const id=`i${i}`;return __privateGet(this,_inputs).has(id)?generateInputId(i+1):id};const id2=DflowData.isDflowId(obj.id)?obj.id:generateInputId();const pin=new DflowInput(__spreadProps(__spreadValues({},obj),{id:id2}));__privateGet(this,_inputs).set(id2,pin);__privateGet(this,_inputPosition).push(id2);return pin}newOutput(obj){const numOutputs=__privateGet(this,_outputs).size;const generateOutputId=(i=numOutputs)=>{const id=`o${i}`;return __privateGet(this,_outputs).has(id)?generateOutputId(i+1):id};const id3=DflowData.isDflowId(obj.id)?obj.id:generateOutputId();const pin=new DflowOutput(__spreadProps(__spreadValues({},obj),{id:id3}));__privateGet(this,_outputs).set(id3,pin);__privateGet(this,_outputPosition).push(id3);return pin}run(){}toObject(){const obj=__spreadProps(__spreadValues({},super.toObject()),{kind:this.kind});const inputs=[];const outputs=[];for(const input12 of this.inputs){inputs.push(input12.toObject())}if(inputs.length>0){obj.inputs=inputs}for(const output32 of this.outputs){outputs.push(output32.toObject())}if(outputs.length>0){obj.outputs=outputs}return obj}}_inputs=new WeakMap;_outputs=new WeakMap;_inputPosition=new WeakMap;_outputPosition=new WeakMap;__publicField(DflowNode,"kind");__publicField(DflowNode,"isAsync");__publicField(DflowNode,"isConstant");__publicField(DflowNode,"inputs");__publicField(DflowNode,"outputs");class DflowEdge extends DflowItem{constructor(_i){var _j=_i,{source,target}=_j,item=__objRest(_j,["source","target"]);super(item);__publicField(this,"source");__publicField(this,"target");this.source=source;this.target=target}toObject(){return __spreadProps(__spreadValues({},super.toObject()),{source:this.source,target:this.target})}}const _DflowGraph=class{constructor(){__privateAdd(this,_nodeIdsInsideFunctions);__publicField(this,"nodes",new Map);__publicField(this,"edges",new Map);__publicField(this,"runOptions",{verbose:false});__publicField(this,"runStatus",null);__publicField(this,"executionReport",null)}static childrenOfNodeId(nodeId,nodeConnections){return nodeConnections.filter(({sourceId})=>nodeId===sourceId).map(({targetId})=>targetId)}static parentsOfNodeId(nodeId,nodeConnections){return nodeConnections.filter(({targetId})=>nodeId===targetId).map(({sourceId})=>sourceId)}static levelOfNodeId(nodeId,nodeConnections){const parentsNodeIds=_DflowGraph.parentsOfNodeId(nodeId,nodeConnections);if(parentsNodeIds.length===0){return 0}let maxLevel=0;for(const parentNodeId of parentsNodeIds){const level=_DflowGraph.levelOfNodeId(parentNodeId,nodeConnections);maxLevel=Math.max(level,maxLevel)}return maxLevel+1}static ancestorsOfNodeId(nodeId,nodeConnections){const parentsNodeIds=_DflowGraph.parentsOfNodeId(nodeId,nodeConnections);if(parentsNodeIds.length===0){return[]}else{return parentsNodeIds.reduce((accumulator,parentNodeId,index,array)=>{const ancestors=_DflowGraph.ancestorsOfNodeId(parentNodeId,nodeConnections);const result=accumulator.concat(ancestors);return index===array.length-1?Array.from(new Set(array.concat(result))):result},[])}}static sortNodesByLevel(nodeIds,nodeConnections){const levelOf={};for(const nodeId of nodeIds){levelOf[nodeId]=_DflowGraph.levelOfNodeId(nodeId,nodeConnections)}return nodeIds.slice().sort((a,b)=>levelOf[a]<=levelOf[b]?-1:1)}get nodeConnections(){return[...this.edges.values()].map(edge=>({sourceId:edge.source[0],targetId:edge.target[0]}))}async run(){var _a,_b;const{verbose}=this.runOptions;this.runStatus="waiting";this.executionReport={status:this.runStatus,start:new Date};if(verbose){this.executionReport.steps=[]}const nodeIdsExcluded=__privateMethod(this,_nodeIdsInsideFunctions,nodeIdsInsideFunctions_fn).call(this);const nodeIds=_DflowGraph.sortNodesByLevel([...this.nodes.keys()].filter(nodeId=>!nodeIdsExcluded.includes(nodeId)),this.nodeConnections);NODES_LOOP:for(const nodeId1 of nodeIds){const node=this.nodes.get(nodeId1);try{if(!node.meta.isConstant){let someInputIsNotValid=false;INPUTS_LOOP:for(const{id,data,types,isOptional}of node.inputs){if(isOptional&&typeof data==="undefined"){continue INPUTS_LOOP}if(!DflowData.validate(data,types)){someInputIsNotValid=true;if(verbose){(_a=this.executionReport.steps)==null?void 0:_a.push(_executionNodeInfo(node.toObject(),`invalid input data nodeId=${nodeId1} inputId=${id} data=${data}`))}break INPUTS_LOOP}}if(someInputIsNotValid){for(const output42 of node.outputs){output42.clear()}continue NODES_LOOP}if(node.meta.isAsync){await node.run()}else{node.run()}}if(verbose){(_b=this.executionReport.steps)==null?void 0:_b.push(_executionNodeInfo(node.toObject()))}}catch(error){console.error(error);this.runStatus="failure"}}if(this.runStatus==="waiting"){this.runStatus="success"}this.executionReport.status=this.runStatus;this.executionReport.end=new Date}toObject(){const obj={nodes:[],edges:[]};for(const node of this.nodes.values()){obj.nodes.push(node.toObject())}for(const edge of this.edges.values()){obj.edges.push(edge.toObject())}return obj}};let DflowGraph=_DflowGraph;_nodeIdsInsideFunctions=new WeakSet;nodeIdsInsideFunctions_fn=function(){const ancestorsOfReturnNodes=[];for(const node of[...this.nodes.values()]){if(node.kind==="return"){ancestorsOfReturnNodes.push(_DflowGraph.ancestorsOfNodeId(node.id,this.nodeConnections))}}return Array.from(new Set(ancestorsOfReturnNodes.flat()))};const _DflowHost=class{constructor(nodesCatalog1={}){__privateAdd(this,_graph,void 0);__publicField(this,"nodesCatalog");__publicField(this,"context");this.nodesCatalog=__spreadValues(__spreadValues({},nodesCatalog1),coreNodesCatalog);__privateSet(this,_graph,new DflowGraph);this.context={}}get executionReport(){return __privateGet(this,_graph).executionReport}get edges(){return Array.from(__privateGet(this,_graph).edges.values())}get nodes(){return Array.from(__privateGet(this,_graph).nodes.values())}get runStatusIsSuccess(){return __privateGet(this,_graph).runStatus==="success"}get runStatusIsWaiting(){return __privateGet(this,_graph).runStatus==="waiting"}get runStatusIsFailure(){return __privateGet(this,_graph).runStatus==="failure"}set verbose(option){__privateGet(this,_graph).runOptions.verbose=option}clearGraph(){__privateGet(this,_graph).nodes.clear();__privateGet(this,_graph).edges.clear()}connect(sourceNode,sourcePosition=0){return{to:(targetNode,targetPosition=0)=>{const sourcePin=sourceNode.output(sourcePosition);const targetPin=targetNode.input(targetPosition);this.newEdge({source:[sourceNode.id,sourcePin.id],target:[targetNode.id,targetPin.id]})}}}deleteEdge(edgeId){if(typeof edgeId!=="string"){throw new TypeError(_missingString("edgeId"))}const edge=this.getEdgeById(edgeId);if(!edge)return;const[targetNodeId,targetPinId]=edge.target;const targetNode=this.getNodeById(targetNodeId);const targetPin=targetNode.getInputById(targetPinId);targetPin.disconnect();__privateGet(this,_graph).edges.delete(edgeId)}deleteNode(nodeId){if(typeof nodeId!=="string"){throw new TypeError(_missingString("nodeId"))}const node=this.getNodeById(nodeId);if(node){for(const edge of this.edges){const{source:[sourceNodeId],target:[targetNodeId]}=edge;if(sourceNodeId===node.id||targetNodeId===node.id){this.deleteEdge(edge.id)}}__privateGet(this,_graph).nodes.delete(nodeId)}else{throw new Error(`DflowNode not found, id=${nodeId}`)}}deleteEdgesConnectedToPin([nodeId,pinId]){for(const edge of this.edges){const[sourceNodeId,sourcePinId]=edge.source;const[targetNodeId,targetPinId]=edge.target;if(sourceNodeId===nodeId&&sourcePinId===pinId||targetNodeId===nodeId&&targetPinId===pinId){this.deleteEdge(edge.id)}}}executeFunction(functionId,args){var _a,_b;const{verbose}=__privateGet(this,_graph).runOptions;const nodeConnections=__privateGet(this,_graph).nodeConnections;const childrenNodeIds=DflowGraph.childrenOfNodeId(functionId,nodeConnections);const returnNodeIds=[];for(const childrenNodeId of childrenNodeIds){const node=this.getNodeById(childrenNodeId);if(node.kind===DflowNodeReturn.kind){returnNodeIds.push(node.id)}}const nodeIdsInsideFunction=returnNodeIds.reduce((accumulator,returnNodeId,index,array)=>{const ancestors=DflowGraph.ancestorsOfNodeId(returnNodeId,nodeConnections);const result=accumulator.concat(ancestors);return index===array.length?Array.from(new Set(result)):result},[]);const nodeIds=DflowGraph.sortNodesByLevel([...returnNodeIds,...nodeIdsInsideFunction],nodeConnections);for(const nodeId of nodeIds){const node=this.getNodeById(nodeId);try{switch(node.kind){case DflowNodeArgument.kind:{const position=node.input(0).data;const index=typeof position==="number"&&!isNaN(position)?Math.max(position,0):0;node.output(0).data=args[index];break}case DflowNodeReturn.kind:{return node.input(1).data}default:{if(!node.meta.isConstant&&!node.meta.isAsync){node.run()}if(verbose){(_b=(_a=this.executionReport)==null?void 0:_a.steps)==null?void 0:_b.push(_executionNodeInfo(node.toObject()))}}}}catch(error){console.error(error)}}}getEdgeById(id){const item=__privateGet(this,_graph).edges.get(id);if(!item){throw new DflowErrorItemNotFound("edge",id)}return item}getNodeById(id){const item=__privateGet(this,_graph).nodes.get(id);if(!item){throw new DflowErrorItemNotFound("node",id)}return item}newNode(obj){var _a,_b,_c,_d,_e,_f,_g;const numNodes=__privateGet(this,_graph).nodes.size;const generateNodeId=(i=numNodes)=>{const id=`n${i}`;return __privateGet(this,_graph).nodes.has(id)?generateNodeId(i+1):id};const NodeClass=(_a=this.nodesCatalog[obj.kind])!=null?_a:DflowNodeUnknown;const id4=DflowData.isDflowId(obj.id)?obj.id:generateNodeId();const meta={isAsync:NodeClass.isAsync,isConstant:NodeClass.isConstant};const inputs=Array.isArray(obj.inputs)?__privateMethod(_b=_DflowHost,_generateInputIds,generateInputIds_fn).call(_b,obj.inputs):__privateMethod(_d=_DflowHost,_generateInputIds,generateInputIds_fn).call(_d,(_c=NodeClass.inputs)!=null?_c:[]);const outputs=Array.isArray(obj.outputs)?__privateMethod(_e=_DflowHost,_generateOutputIds,generateOutputIds_fn).call(_e,obj.outputs):__privateMethod(_g=_DflowHost,_generateOutputIds,generateOutputIds_fn).call(_g,(_f=NodeClass.outputs)!=null?_f:[]);const node=new NodeClass(__spreadProps(__spreadValues({},obj),{id:id4,inputs,outputs}),this,meta);__privateGet(this,_graph).nodes.set(node.id,node);return node}newEdge(obj){const numEdges=__privateGet(this,_graph).edges.size;const generateEdgeId=(i=numEdges)=>{const id=`e${i}`;return __privateGet(this,_graph).edges.has(id)?generateEdgeId(i+1):id};const id5=DflowData.isDflowId(obj.id)?obj.id:generateEdgeId();const edge=new DflowEdge(__spreadProps(__spreadValues({},obj),{id:id5}));__privateGet(this,_graph).edges.set(edge.id,edge);const[sourceNodeId,sourcePinId]=edge.source;const[targetNodeId,targetPinId]=edge.target;const sourceNode=this.getNodeById(sourceNodeId);const targetNode=this.getNodeById(targetNodeId);const sourcePin=sourceNode.getOutputById(sourcePinId);const targetPin=targetNode.getInputById(targetPinId);targetPin.connectTo(sourcePin);return edge}newInput(nodeId,obj){const node=this.getNodeById(nodeId);return node.newInput(obj)}newOutput(nodeId,obj){const node=this.getNodeById(nodeId);return node.newOutput(obj)}toObject(){return __privateGet(this,_graph).toObject()}async run(){await __privateGet(this,_graph).run()}};let DflowHost=_DflowHost;_graph=new WeakMap;_generateInputIds=new WeakSet;generateInputIds_fn=function(pins=[]){return pins.map((pin,i)=>__spreadProps(__spreadValues({},pin),{id:DflowData.isDflowId(pin.id)?pin.id:`i${i}`}))};_generateOutputIds=new WeakSet;generateOutputIds_fn=function(pins1=[]){return pins1.map((pin,i)=>__spreadProps(__spreadValues({},pin),{id:DflowData.isDflowId(pin.id)?pin.id:`o${i}`}))};__privateAdd(DflowHost,_generateInputIds);__privateAdd(DflowHost,_generateOutputIds);const{input,output}=DflowNode;class DflowNodeArgument extends DflowNode{}__publicField(DflowNodeArgument,"kind","argument");__publicField(DflowNodeArgument,"isConstant",true);__publicField(DflowNodeArgument,"inputs",[input("number",{name:"position",optional:true})]);__publicField(DflowNodeArgument,"outputs",[output()]);class DflowNodeArray extends DflowNode{run(){const data=this.input(0).data;if(DflowData.isArray(data)){this.output(0).data=data}else{this.output(0).clear()}}}__publicField(DflowNodeArray,"kind","array");__publicField(DflowNodeArray,"inputs",[input()]);__publicField(DflowNodeArray,"outputs",[output("array")]);class DflowNodeBoolean extends DflowNode{run(){const data=this.input(0).data;if(DflowData.isBoolean(data)){this.output(0).data=data}else{this.output(0).clear()}}}__publicField(DflowNodeBoolean,"kind","boolean");__publicField(DflowNodeBoolean,"inputs",[input()]);__publicField(DflowNodeBoolean,"outputs",[output("boolean")]);class DflowNodeData extends DflowNode{}__publicField(DflowNodeData,"kind","data");__publicField(DflowNodeData,"isConstant",true);__publicField(DflowNodeData,"outputs",[output()]);class DflowNodeFunction extends DflowNode{constructor(...args){super(...args);this.output(0).data=this.id}}__publicField(DflowNodeFunction,"kind","function");__publicField(DflowNodeFunction,"isConstant",true);__publicField(DflowNodeFunction,"outputs",[output("DflowId",{name:"id"})]);class DflowNodeIsUndefined extends DflowNode{run(){this.output(0).data=typeof this.input(0).data==="undefined"}}__publicField(DflowNodeIsUndefined,"kind","isUndefined");__publicField(DflowNodeIsUndefined,"inputs",[input()]);__publicField(DflowNodeIsUndefined,"outputs",[output("boolean")]);class DflowNodeNumber extends DflowNode{run(){const data=this.input(0).data;if(DflowData.isNumber(data)){this.output(0).data=data}else{this.output(0).clear()}}}__publicField(DflowNodeNumber,"kind","number");__publicField(DflowNodeNumber,"inputs",[input()]);__publicField(DflowNodeNumber,"outputs",[output("number")]);class DflowNodeObject extends DflowNode{run(){const data=this.input(0).data;if(DflowData.isObject(data)){this.output(0).data=data}else{this.output(0).clear()}}}__publicField(DflowNodeObject,"kind","object");__publicField(DflowNodeObject,"inputs",[input()]);__publicField(DflowNodeObject,"outputs",[output("object")]);class DflowNodeReturn extends DflowNode{}__publicField(DflowNodeReturn,"kind","return");__publicField(DflowNodeReturn,"isConstant",true);__publicField(DflowNodeReturn,"inputs",[input("DflowId",{name:"functionId"}),input([],{name:"value"})]);class DflowNodeString extends DflowNode{run(){const data=this.input(0).data;if(DflowData.isString(data)){this.output(0).data=data}else{this.output(0).clear()}}}__publicField(DflowNodeString,"kind","string");__publicField(DflowNodeString,"inputs",[input()]);__publicField(DflowNodeString,"outputs",[output("string")]);class DflowNodeUnknown extends DflowNode{}const coreNodesCatalog={[DflowNodeArgument.kind]:DflowNodeArgument,[DflowNodeArray.kind]:DflowNodeArray,[DflowNodeBoolean.kind]:DflowNodeBoolean,[DflowNodeData.kind]:DflowNodeData,[DflowNodeIsUndefined.kind]:DflowNodeIsUndefined,[DflowNodeNumber.kind]:DflowNodeNumber,[DflowNodeObject.kind]:DflowNodeObject,[DflowNodeFunction.kind]:DflowNodeFunction,[DflowNodeString.kind]:DflowNodeString,[DflowNodeReturn.kind]:DflowNodeReturn};const{input:input1,output:output1}=DflowNode;class DflowArrayAt extends DflowNode{run(){const array=this.input(0).data;const index=this.input(1).data;this.output(0).data=array.at(index)}}__publicField(DflowArrayAt,"kind","arrayAt");__publicField(DflowArrayAt,"inputs",[input1("array"),input1("number",{name:"index"})]);__publicField(DflowArrayAt,"outputs",[output1()]);class DflowArrayFilter extends DflowNode{run(){this.output(0).data=this.input(0).data.filter((...args)=>this.host.executeFunction(this.input(1).data,args))}}__publicField(DflowArrayFilter,"kind","arrayFilter");__publicField(DflowArrayFilter,"inputs",[input1("array"),input1("DflowId",{name:"functionId"})]);__publicField(DflowArrayFilter,"outputs",[output1("array")]);class DflowArrayFindLastIndex extends DflowNode{run(){this.output(0).data=this.input(0).data.findLastIndex((...args)=>this.host.executeFunction(this.input(1).data,args))}}__publicField(DflowArrayFindLastIndex,"kind","arrayFindLastIndex");__publicField(DflowArrayFindLastIndex,"inputs",[input1("array"),input1("DflowId",{name:"functionId"})]);__publicField(DflowArrayFindLastIndex,"outputs",[output1("number")]);class DflowArrayFindIndex extends DflowNode{run(){this.output(0).data=this.input(0).data.findIndex((...args)=>this.host.executeFunction(this.input(1).data,args))}}__publicField(DflowArrayFindIndex,"kind","arrayFindIndex");__publicField(DflowArrayFindIndex,"inputs",[input1("array"),input1("DflowId",{name:"functionId"})]);__publicField(DflowArrayFindIndex,"outputs",[output1("number")]);class DflowArrayIncludes extends DflowNode{run(){const data=this.input(0).data;const element=this.input(1).data;if(Array.isArray(data)){this.output(0).data=data.includes(element)}}}__publicField(DflowArrayIncludes,"kind","arrayIncludes");__publicField(DflowArrayIncludes,"inputs",[input1("array",{name:"array"}),input1("string",{name:"element"})]);__publicField(DflowArrayIncludes,"outputs",[output1("boolean")]);class DflowArrayJoin extends DflowNode{run(){this.output(0).data=this.input(0).data.join(this.input(1).data)}}__publicField(DflowArrayJoin,"kind","arrayJoin");__publicField(DflowArrayJoin,"inputs",[input1("array",{name:"array"}),input1("string",{name:"separator",optional:true})]);__publicField(DflowArrayJoin,"outputs",[output1("string")]);class DflowArrayLength extends DflowNode{run(){const data=this.input(0).data;if(Array.isArray(data)){this.output(0).data=data.length}else{this.output(0).clear}}}__publicField(DflowArrayLength,"kind","arrayLength");__publicField(DflowArrayLength,"inputs",[input1("array")]);__publicField(DflowArrayLength,"outputs",[output1("number")]);class DflowArrayMap extends DflowNode{run(){this.output(0).data=this.input(0).data.map((...args)=>this.host.executeFunction(this.input(1).data,args))}}__publicField(DflowArrayMap,"kind","arrayMap");__publicField(DflowArrayMap,"inputs",[input1("array"),input1("DflowId",{name:"functionId"})]);__publicField(DflowArrayMap,"outputs",[output1("array")]);class DflowArrayPop extends DflowNode{run(){const array=this.input(0).data.slice();const element=array.pop();this.output(0).data=element;this.output(1).data=array}}__publicField(DflowArrayPop,"kind","arrayPop");__publicField(DflowArrayPop,"inputs",[input1("array")]);__publicField(DflowArrayPop,"outputs",[output1([],{name:"element"}),output1("array",{name:"rest"})]);class DflowArrayPush extends DflowNode{run(){const array=this.input(0).data.slice();const element=this.input(1).data;if(element){array.push(element)}this.output(0).data=array}}__publicField(DflowArrayPush,"kind","arrayPush");__publicField(DflowArrayPush,"inputs",[input1("array"),input1([],{name:"element"})]);__publicField(DflowArrayPush,"outputs",[output1("array")]);class DflowArrayReverse extends DflowNode{run(){const array=this.input(0).data.slice();this.output(0).data=array.reverse()}}__publicField(DflowArrayReverse,"kind","arrayReverse");__publicField(DflowArrayReverse,"inputs",[input1("array")]);__publicField(DflowArrayReverse,"outputs",[input1("array")]);class DflowArrayShift extends DflowNode{run(){const array=this.input(0).data.slice();const element=array.shift();this.output(0).data=element;this.output(1).data=array}}__publicField(DflowArrayShift,"kind","arrayShift");__publicField(DflowArrayShift,"inputs",[input1("array")]);__publicField(DflowArrayShift,"outputs",[output1([],{name:"element"}),output1("array",{name:"rest"})]);class DflowArraySlice extends DflowNode{run(){const array=super.input(0).data;const start=super.input(1).data;const end=super.input(2).data;if(typeof end==="number"){super.output(0).data=array.slice(start,end)}else{super.output(0).data=array.slice(start)}}}__publicField(DflowArraySlice,"kind","arraySlice");__publicField(DflowArraySlice,"inputs",[input1("array"),input1("number",{name:"start"}),input1("number",{name:"end",optional:true})]);__publicField(DflowArraySlice,"outputs",[output1("array")]);const catalog={[DflowArrayAt.kind]:DflowArrayAt,[DflowArrayFilter.kind]:DflowArrayFilter,[DflowArrayFindLastIndex.kind]:DflowArrayFindLastIndex,[DflowArrayFindIndex.kind]:DflowArrayFindIndex,[DflowArrayIncludes.kind]:DflowArrayIncludes,[DflowArrayJoin.kind]:DflowArrayJoin,[DflowArrayLength.kind]:DflowArrayLength,[DflowArrayMap.kind]:DflowArrayMap,[DflowArrayPop.kind]:DflowArrayPop,[DflowArrayPush.kind]:DflowArrayPush,[DflowArrayReverse.kind]:DflowArrayReverse,[DflowArrayShift.kind]:DflowArrayShift,[DflowArraySlice.kind]:DflowArraySlice};const{input:input2,output:output2}=DflowNode;class DflowNodeIf extends DflowNode{run(){this.output(0).data=this.input(0).data?this.input(1).data:this.input(2).data}}__publicField(DflowNodeIf,"kind","if");__publicField(DflowNodeIf,"inputs",[input2([],{name:"condition"}),input2([],{name:"then"}),input2([],{name:"else"})]);__publicField(DflowNodeIf,"outputs",[output2()]);const catalog1={[DflowNodeIf.kind]:DflowNodeIf};const{input:input3}=DflowNode;class DflowConsoleLog extends DflowNode{run(){console.log(this.input(0).data)}}__publicField(DflowConsoleLog,"kind","consoleLog");__publicField(DflowConsoleLog,"inputs",[input3()]);const catalog2={[DflowConsoleLog.kind]:DflowConsoleLog};const{input:input4,output:output3}=DflowNode;const dateOutputs=[output3("string"),output3("number",{name:"milliseconds"})];class DflowDateNew extends DflowNode{run(){const input11=this.input(0).data;if(typeof input11==="string"||typeof input11==="number"){const date=new Date(input11);const serializedDate=date.toJSON();if(serializedDate!==null){this.output(0).data=serializedDate;this.output(1).data=date.getTime()}}const d=new Date;this.output(0).data=d.toJSON();this.output(1).data=d.getTime()}}__publicField(DflowDateNew,"kind","newDate");__publicField(DflowDateNew,"inputs",[input4(["string","number"],{optional:true})]);__publicField(DflowDateNew,"outputs",dateOutputs);class DflowDateNow extends DflowNode{run(){const now=Date.now();this.output(0).data=new Date(now).toJSON();this.output(1).data=now}}__publicField(DflowDateNow,"kind","now");__publicField(DflowDateNow,"outputs",dateOutputs);const catalog3={[DflowDateNew.kind]:DflowDateNew,[DflowDateNow.kind]:DflowDateNow};const{input:input5,output:output4}=DflowNode;class DflowNodeAnd extends DflowNode{run(){this.output(0).data=this.input(0).data&&this.input(1).data}}__publicField(DflowNodeAnd,"kind","and");__publicField(DflowNodeAnd,"inputs",[input5("boolean"),input5("boolean")]);__publicField(DflowNodeAnd,"outputs",[output4("boolean")]);class DflowNodeNot extends DflowNode{run(){this.output(0).data=!this.input(0).data}}__publicField(DflowNodeNot,"kind","not");__publicField(DflowNodeNot,"inputs",[input5("boolean")]);__publicField(DflowNodeNot,"outputs",[output4("boolean")]);class DflowNodeNullishCoaleshing extends DflowNode{run(){var _a;this.output(0).data=(_a=this.input(0).data)!=null?_a:this.input(1).data}}__publicField(DflowNodeNullishCoaleshing,"kind","??");__publicField(DflowNodeNullishCoaleshing,"inputs",[input5(),input5()]);__publicField(DflowNodeNullishCoaleshing,"outputs",[output4()]);class DflowNodeOr extends DflowNode{run(){this.output(0).data=this.input(0).data||this.input(1).data}}__publicField(DflowNodeOr,"kind","or");__publicField(DflowNodeOr,"inputs",[input5("boolean"),input5("boolean")]);__publicField(DflowNodeOr,"outputs",[output4("boolean")]);const catalog4={[DflowNodeAnd.kind]:DflowNodeAnd,[DflowNodeNot.kind]:DflowNodeNot,[DflowNodeNullishCoaleshing.kind]:DflowNodeNullishCoaleshing,[DflowNodeOr.kind]:DflowNodeOr};const{input:input6,output:output5}=DflowNode;class DflowMathAbs extends DflowNode{run(){this.output(0).data=Math.abs(this.input(0).data)}}__publicField(DflowMathAbs,"kind","mathAbs");__publicField(DflowMathAbs,"inputs",[input6("number")]);__publicField(DflowMathAbs,"outputs",[output5("number")]);class DflowMathCos extends DflowNode{run(){this.output(0).data=Math.cos(this.input(0).data)}}__publicField(DflowMathCos,"kind","mathCos");__publicField(DflowMathCos,"inputs",[input6("number")]);__publicField(DflowMathCos,"outputs",[output5("number")]);class DflowMathCosh extends DflowNode{run(){this.output(0).data=Math.cosh(this.input(0).data)}}__publicField(DflowMathCosh,"kind","mathCosh");__publicField(DflowMathCosh,"inputs",[input6("number")]);__publicField(DflowMathCosh,"outputs",[output5("number")]);class DflowMathFloor extends DflowNode{run(){this.output(0).data=Math.floor(this.input(0).data)}}__publicField(DflowMathFloor,"kind","mathFloor");__publicField(DflowMathFloor,"inputs",[input6("number")]);__publicField(DflowMathFloor,"outputs",[output5("number")]);class DflowMathMax extends DflowNode{run(){const list=this.input(0).data;const data=Math.max(...list);if(isNaN(data)){this.output(0).clear()}else{this.output(0).data=data}}}__publicField(DflowMathMax,"kind","mathMax");__publicField(DflowMathMax,"inputs",[input6("array")]);__publicField(DflowMathMax,"outputs",[output5("number")]);class DflowMathMin extends DflowNode{run(){const list=this.input(0).data;const data=Math.min(...list);if(isNaN(data)){this.output(0).clear()}else{this.output(0).data=data}}}__publicField(DflowMathMin,"kind","mathMin");__publicField(DflowMathMin,"inputs",[input6("array")]);__publicField(DflowMathMin,"outputs",[output5("number")]);class DflowMathPI extends DflowNode{}__publicField(DflowMathPI,"kind","mathPI");__publicField(DflowMathPI,"isConstant",true);__publicField(DflowMathPI,"outputs",[output5("number",{name:"\u03C0",data:Math.PI})]);class DflowMathRound extends DflowNode{run(){this.output(0).data=Math.round(this.input(0).data)}}__publicField(DflowMathRound,"kind","mathRound");__publicField(DflowMathRound,"inputs",[input6("number")]);__publicField(DflowMathRound,"outputs",[output5("number")]);class DflowMathSin extends DflowNode{run(){this.output(0).data=Math.sin(this.input(0).data)}}__publicField(DflowMathSin,"kind","mathSin");__publicField(DflowMathSin,"inputs",[input6("number")]);__publicField(DflowMathSin,"outputs",[output5("number")]);class DflowMathSinh extends DflowNode{run(){this.output(0).data=Math.sinh(this.input(0).data)}}__publicField(DflowMathSinh,"kind","mathSinh");__publicField(DflowMathSinh,"inputs",[input6("number")]);__publicField(DflowMathSinh,"outputs",[output5("number")]);const catalog5={[DflowMathAbs.kind]:DflowMathAbs,[DflowMathCos.kind]:DflowMathCos,[DflowMathCosh.kind]:DflowMathCosh,[DflowMathFloor.kind]:DflowMathFloor,[DflowMathMax.kind]:DflowMathMax,[DflowMathMin.kind]:DflowMathMin,[DflowMathPI.kind]:DflowMathPI,[DflowMathRound.kind]:DflowMathRound,[DflowMathSin.kind]:DflowMathSin,[DflowMathSinh.kind]:DflowMathSinh};const{input:input7,output:output6}=DflowNode;class DflowIsFinite extends DflowNode{run(){this.output(0).data=Number.isFinite(this.input(0).data)}}__publicField(DflowIsFinite,"kind","isFinite");__publicField(DflowIsFinite,"inputs",[input7("number")]);__publicField(DflowIsFinite,"outputs",[output6("boolean")]);class DflowIsInteger extends DflowNode{run(){this.output(0).data=Number.isInteger(this.input(0).data)}}__publicField(DflowIsInteger,"kind","isInteger");__publicField(DflowIsInteger,"inputs",[input7()]);__publicField(DflowIsInteger,"outputs",[output6("boolean")]);class DflowIsNaN extends DflowNode{run(){this.output(0).data=Number.isNaN(this.input(0).data)}}__publicField(DflowIsNaN,"kind","isNaN");__publicField(DflowIsNaN,"inputs",[input7()]);__publicField(DflowIsNaN,"outputs",[output6("boolean")]);class DflowParseFloat extends DflowNode{run(){this.output(0).data=parseFloat(this.input(0).data)}}__publicField(DflowParseFloat,"kind","parseFloat");__publicField(DflowParseFloat,"inputs",[input7("string")]);__publicField(DflowParseFloat,"outputs",[output6("number")]);class DflowParseInt extends DflowNode{run(){this.output(0).data=parseInt(this.input(0).data)}}__publicField(DflowParseInt,"kind","parseInt");__publicField(DflowParseInt,"inputs",[input7(["number","string"])]);__publicField(DflowParseInt,"outputs",[output6("number")]);const catalog6={[DflowIsFinite.kind]:DflowIsFinite,[DflowIsInteger.kind]:DflowIsInteger,[DflowIsNaN.kind]:DflowIsNaN,[DflowParseFloat.kind]:DflowParseFloat,[DflowParseInt.kind]:DflowParseInt};const{input:input8,output:output7}=DflowNode;class DflowObjectKeys extends DflowNode{run(){this.output(0).data=Object.keys(this.input(0).data)}}__publicField(DflowObjectKeys,"kind","objectKeys");__publicField(DflowObjectKeys,"inputs",[input8("object")]);__publicField(DflowObjectKeys,"outputs",[output7("array")]);class DflowObjectValues extends DflowNode{run(){this.output(0).data=Object.values(this.input(0).data)}}__publicField(DflowObjectValues,"kind","objectValues");__publicField(DflowObjectValues,"inputs",[input8("object")]);__publicField(DflowObjectValues,"outputs",[output7("array")]);const catalog7={[DflowObjectKeys.kind]:DflowObjectKeys,[DflowObjectValues.kind]:DflowObjectValues};const{input:input9,output:output8}=DflowNode;class DflowAddition extends DflowNode{run(){this.output(0).data=this.input(0).data+this.input(1).data}}__publicField(DflowAddition,"kind","addition");__publicField(DflowAddition,"inputs",[input9("number"),input9("number")]);__publicField(DflowAddition,"outputs",[output8("number")]);class DflowDivision extends DflowNode{run(){if(this.input(1).data){this.output(0).data=this.input(0).data/this.input(1).data}else{this.output(0).clear()}}}__publicField(DflowDivision,"kind","division");__publicField(DflowDivision,"inputs",[input9("number"),input9("number")]);__publicField(DflowDivision,"outputs",[output8("number")]);class DflowEquality extends DflowNode{run(){this.output(0).data=this.input(0).data==this.input(1).data}}__publicField(DflowEquality,"kind","equality");__publicField(DflowEquality,"inputs",[input9(),input9()]);__publicField(DflowEquality,"outputs",[output8("boolean")]);class DflowLessThan extends DflowNode{run(){this.output(0).data=this.input(0).data<this.input(1).data}}__publicField(DflowLessThan,"kind","lessThan");__publicField(DflowLessThan,"inputs",[input9("number"),input9("number")]);__publicField(DflowLessThan,"outputs",[output8("boolean")]);class DflowLessThanOrEqual extends DflowNode{run(){this.output(0).data=this.input(0).data<=this.input(1).data}}__publicField(DflowLessThanOrEqual,"kind","lessThanOrEqual");__publicField(DflowLessThanOrEqual,"inputs",[input9("number"),input9("number")]);__publicField(DflowLessThanOrEqual,"outputs",[output8("boolean")]);class DflowGreaterThan extends DflowNode{run(){this.output(0).data=this.input(0).data>this.input(1).data}}__publicField(DflowGreaterThan,"kind","greaterThan");__publicField(DflowGreaterThan,"inputs",[input9("number"),input9("number")]);__publicField(DflowGreaterThan,"outputs",[output8("boolean")]);class DflowGreaterThanOrEqual extends DflowNode{run(){this.output(0).data=this.input(0).data>=this.input(1).data}}__publicField(DflowGreaterThanOrEqual,"kind","greaterThanOrEqual");__publicField(DflowGreaterThanOrEqual,"inputs",[input9("number"),input9("number")]);__publicField(DflowGreaterThanOrEqual,"outputs",[output8("boolean")]);class DflowInequality extends DflowNode{run(){this.output(0).data=this.input(0).data!=this.input(1).data}}__publicField(DflowInequality,"kind","inequality");__publicField(DflowInequality,"inputs",[input9(),input9()]);__publicField(DflowInequality,"outputs",[output8("boolean")]);class DflowMultiplication extends DflowNode{run(){this.output(0).data=this.input(0).data*this.input(1).data}}__publicField(DflowMultiplication,"kind","multiplication");__publicField(DflowMultiplication,"inputs",[input9("number"),input9("number")]);__publicField(DflowMultiplication,"outputs",[output8("number")]);class DflowSubtraction extends DflowNode{run(){this.output(0).data=this.input(0).data-this.input(1).data}}__publicField(DflowSubtraction,"kind","subtraction");__publicField(DflowSubtraction,"inputs",[input9("number"),input9("number")]);__publicField(DflowSubtraction,"outputs",[output8("number")]);const catalog8={[DflowAddition.kind]:DflowAddition,[DflowDivision.kind]:DflowDivision,[DflowEquality.kind]:DflowEquality,[DflowGreaterThan.kind]:DflowGreaterThan,[DflowGreaterThanOrEqual.kind]:DflowGreaterThanOrEqual,[DflowLessThan.kind]:DflowLessThan,[DflowLessThanOrEqual.kind]:DflowLessThanOrEqual,[DflowInequality.kind]:DflowInequality,[DflowMultiplication.kind]:DflowMultiplication,[DflowSubtraction.kind]:DflowSubtraction};const{input:input10,output:output9}=DflowNode;class DflowNodeStringLength extends DflowNode{run(){this.output(0).data=this.input(0).data.length}}__publicField(DflowNodeStringLength,"kind","stringLength");__publicField(DflowNodeStringLength,"inputs",[input10("string")]);__publicField(DflowNodeStringLength,"outputs",[output9("number")]);class DflowNodeSubstring extends DflowNode{run(){const str=this.input(0).data;const start=this.input(1).data;const end=this.input(2).data;this.output(0).data=str.substring(start,end)}}__publicField(DflowNodeSubstring,"kind","substring");__publicField(DflowNodeSubstring,"inputs",[input10("string"),input10("number",{name:"start"}),input10("number",{name:"end",optional:true})]);__publicField(DflowNodeSubstring,"outputs",[output9("string")]);const catalog9={[DflowNodeSubstring.kind]:DflowNodeSubstring,[DflowNodeStringLength.kind]:DflowNodeStringLength};const nodesCatalog=__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({},catalog),catalog1),catalog2),catalog3),catalog4),catalog5),catalog6),catalog7),catalog8),catalog9);export{nodesCatalog};
