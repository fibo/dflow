var __defProp=Object.defineProperty;var __defProps=Object.defineProperties;var __getOwnPropDescs=Object.getOwnPropertyDescriptors;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __hasOwnProp=Object.prototype.hasOwnProperty;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __spreadValues=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop])}return a};var __spreadProps=(a,b)=>__defProps(a,__getOwnPropDescs(b));var __objRest=(source,exclude)=>{var target={};for(var prop in source)if(__hasOwnProp.call(source,prop)&&exclude.indexOf(prop)<0)target[prop]=source[prop];if(source!=null&&__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(source)){if(exclude.indexOf(prop)<0&&__propIsEnum.call(source,prop))target[prop]=source[prop]}return target};var __publicField=(obj,key,value)=>{__defNormalProp(obj,typeof key!=="symbol"?key+"":key,value);return value};const generateItemId=(itemMap,idPrefix,i)=>{const n=i!=null?i:itemMap.size;const id=`${idPrefix}${n}`;return itemMap.has(id)?generateItemId(itemMap,idPrefix,n+1):id};const dflowDataTypes=["string","number","boolean","object","array","DflowId"];const _DflowData=class{static isArray(arg){return Array.isArray(arg)}static isBoolean(arg){return typeof arg==="boolean"}static isDflowId(arg){return typeof arg==="string"&&arg!==""}static isObject(arg){return typeof arg==="object"&&arg!==null&&!Array.isArray(arg)}static isNumber(arg){return typeof arg==="number"&&!isNaN(arg)&&Number.isFinite(arg)}static isString(arg){return typeof arg==="string"}static isDflowData(arg){if(typeof arg==="undefined")return false;return _DflowData.isString(arg)||_DflowData.isBoolean(arg)||_DflowData.isNumber(arg)||_DflowData.isObject(arg)||_DflowData.isArray(arg)||_DflowData.isDflowId(arg)}static isValidDataType(types,data){const isAnyType=types.length===0;if(isAnyType)return true;return types.some(pinType=>{switch(pinType){case"array":return _DflowData.isArray(data);case"boolean":return _DflowData.isBoolean(data);case"number":return _DflowData.isNumber(data);case"object":return _DflowData.isObject(data);case"string":return _DflowData.isString(data);case"DflowId":return _DflowData.isDflowId(data);default:return false}},true)}};let DflowData=_DflowData;__publicField(DflowData,"types",dflowDataTypes);class DflowPin{constructor({name,types=[]}){__publicField(this,"name");__publicField(this,"types");if(name)this.name=name;this.types=types}static canConnect(sourceTypes,targetTypes){const sourceHasTypeAny=sourceTypes.length===0;if(sourceHasTypeAny)return true;const targetHasTypeAny=targetTypes.length===0;if(targetHasTypeAny)return true;return targetTypes.some(pinType=>sourceTypes.includes(pinType))}get hasTypeAny(){return this.types.length===0}hasType(type){return this.hasTypeAny||this.types.includes(type)}}class DflowInput extends DflowPin{constructor(_a){var _b=_a,{id,optional}=_b,pin=__objRest(_b,["id","optional"]);super(pin);__publicField(this,"id");__publicField(this,"source");__publicField(this,"optional");this.id=id;if(optional)this.optional=optional}get data(){var _a;return(_a=this.source)==null?void 0:_a.data}get isConnected(){return typeof this.source==="undefined"}connectTo(pin){if(DflowPin.canConnect(pin.types,this.types))this.source=pin;else{throw new DflowErrorCannotConnectPins({source:pin.toObject(),target:this.toObject()})}}disconnect(){this.source=void 0}toObject(){return{id:this.id}}}class DflowOutput extends DflowPin{constructor(_c){var _d=_c,{id,data}=_d,pin=__objRest(_d,["id","data"]);super(pin);__publicField(this,"id");__publicField(this,"value");this.id=id;this.value=data}get data(){return this.value}set data(data){switch(true){case typeof data==="undefined":this.clear();break;case this.hasTypeAny:case(this.hasType("string")&&DflowData.isString(data)):case(this.hasType("number")&&DflowData.isNumber(data)):case(this.hasType("boolean")&&DflowData.isBoolean(data)):case(this.hasType("object")&&DflowData.isObject(data)):case(this.hasType("array")&&DflowData.isArray(data)):case(this.hasType("DflowId")&&DflowData.isDflowId(data)):{this.value=data;break}default:{this.clear();break}}}clear(){this.value=void 0}toObject(){const obj={id:this.id};if(typeof this.value!=="undefined")obj.data=this.value;return obj}}class DflowNode{constructor({node:{id,kind,inputs=[],outputs=[]},host}){__publicField(this,"id");__publicField(this,"inputsMap",new Map);__publicField(this,"outputsMap",new Map);__publicField(this,"inputPosition",[]);__publicField(this,"outputPosition",[]);__publicField(this,"kind");__publicField(this,"host");this.id=id;this.host=host;this.kind=kind;for(const obj of inputs){const id1=DflowData.isDflowId(obj.id)?obj.id:generateItemId(this.inputsMap,"i");const pin=new DflowInput(__spreadProps(__spreadValues({},obj),{id:id1}));this.inputsMap.set(id1,pin);this.inputPosition.push(id1)}for(const obj1 of outputs){const id2=DflowData.isDflowId(obj1.id)?obj1.id:generateItemId(this.outputsMap,"o");const pin1=new DflowOutput(__spreadProps(__spreadValues({},obj1),{id:id2}));this.outputsMap.set(id2,pin1);this.outputPosition.push(id2)}}static input(typing=[],rest){return __spreadValues({types:typeof typing==="string"?[typing]:typing},rest)}static output(typing=[],rest){return __spreadValues({types:typeof typing==="string"?[typing]:typing},rest)}get inputsDataAreValid(){for(const{data,types,optional}of this.inputsMap.values()){if(optional&&typeof data==="undefined")continue;if(DflowData.isValidDataType(types,data))continue;return false}return true}clearOutputs(){for(const output10 of this.outputsMap.values())output10.clear()}getInputById(id){const item=this.inputsMap.get(id);if(!item)throw new DflowErrorItemNotFound({kind:"input",id});return item}input(position){const pinId=this.inputPosition[position];if(!pinId){throw new DflowErrorItemNotFound({kind:"input",nodeId:this.id,position})}return this.getInputById(pinId)}getOutputById(id){const item=this.outputsMap.get(id);if(!item)throw new DflowErrorItemNotFound({kind:"output",id});return item}output(position){const pinId=this.outputPosition[position];if(!pinId){throw new DflowErrorItemNotFound({kind:"output",nodeId:this.id,position})}return this.getOutputById(pinId)}run(){}toObject(){const obj={id:this.id,kind:this.kind};const ins=[...this.inputsMap.values()].map(item=>item.toObject());if(ins.length>0)obj.inputs=ins;const outs=[...this.outputsMap.values()].map(item=>item.toObject());if(outs.length>0)obj.outputs=outs;return obj}}const _DflowGraph=class{constructor({nodesCatalog:nodesCatalog2}){__publicField(this,"nodesCatalog");__publicField(this,"nodesMap",new Map);__publicField(this,"edgesMap",new Map);__publicField(this,"runOptions",{verbose:false});__publicField(this,"runStatus",null);__publicField(this,"executionReport",null);this.nodesCatalog=__spreadValues(__spreadValues({},nodesCatalog2),coreNodesCatalog)}static childrenOfNodeId(nodeId,nodeConnections){return nodeConnections.filter(({sourceId})=>nodeId===sourceId).map(({targetId})=>targetId)}static parentsOfNodeId(nodeId,nodeConnections){return nodeConnections.filter(({targetId})=>nodeId===targetId).map(({sourceId})=>sourceId)}static ancestorsOfNodeId(nodeId,nodeConnections){const parentsNodeIds=_DflowGraph.parentsOfNodeId(nodeId,nodeConnections);if(parentsNodeIds.length===0)return[];return parentsNodeIds.reduce((accumulator,parentNodeId,index,array)=>{const ancestors=_DflowGraph.ancestorsOfNodeId(parentNodeId,nodeConnections);const result=accumulator.concat(ancestors);return index===array.length-1?[...new Set(array.concat(result))]:result},[])}static levelOfNodeId(nodeId,nodeConnections){const parentsNodeIds=_DflowGraph.parentsOfNodeId(nodeId,nodeConnections);if(parentsNodeIds.length===0)return 0;let maxLevel=0;for(const parentNodeId of parentsNodeIds){const level=_DflowGraph.levelOfNodeId(parentNodeId,nodeConnections);maxLevel=Math.max(level,maxLevel)}return maxLevel+1}get nodeConnections(){return[...this.edgesMap.values()].map(edge=>({sourceId:edge.source[0],targetId:edge.target[0]}))}get nodeIdsInsideFunctions(){const ancestorsOfReturnNodes=[];for(const node of[...this.nodesMap.values()])if(node.kind==="return")ancestorsOfReturnNodes.push(_DflowGraph.ancestorsOfNodeId(node.id,this.nodeConnections));return[...new Set(ancestorsOfReturnNodes.flat())]}static sortNodesByLevel(nodeIds,nodeConnections){const levelOf={};for(const nodeId of nodeIds){levelOf[nodeId]=_DflowGraph.levelOfNodeId(nodeId,nodeConnections)}return nodeIds.slice().sort((a,b)=>levelOf[a]<=levelOf[b]?-1:1)}async run(runOptions){const{verbose}=runOptions!=null?runOptions:this.runOptions;this.runStatus="running";const executionReport={status:this.runStatus,start:new Date().toJSON(),end:new Date().toJSON(),steps:[]};const nodeIdsExcluded=this.nodeIdsInsideFunctions;const nodeIds=_DflowGraph.sortNodesByLevel([...this.nodesMap.keys()].filter(nodeId=>!nodeIdsExcluded.includes(nodeId)),this.nodeConnections);for(const nodeId of nodeIds){const node=this.nodesMap.get(nodeId);try{if(!node.inputsDataAreValid){if(verbose){const error=new DflowErrorInvalidInputData({nodeId});executionReport.steps.push(_DflowGraph.executionNodeInfo(node.toObject(),error.message))}node.clearOutputs();continue}if(node.run.constructor.name==="AsyncFunction"){await node.run()}else{node.run()}if(verbose){executionReport.steps.push(_DflowGraph.executionNodeInfo(node.toObject()))}}catch(error1){console.error(error1);this.runStatus="failure"}}if(this.runStatus==="running")this.runStatus="success";executionReport.status=this.runStatus;executionReport.end=new Date().toJSON();this.executionReport=executionReport}toObject(){return{nodes:[...this.nodesMap.values()].map(item=>item.toObject()),edges:[...this.edgesMap.values()].map(item=>item.toObject())}}};let DflowGraph=_DflowGraph;__publicField(DflowGraph,"executionNodeInfo",({id,kind,outputs},error)=>{const obj={id,kind,outputs:outputs==null?void 0:outputs.map(({id:id2,data,name})=>({id:id2,data,name}))};if(error)obj.error=error;return obj});const{input,output}=DflowNode;class DflowNodeArgument extends DflowNode{}__publicField(DflowNodeArgument,"kind","argument");__publicField(DflowNodeArgument,"inputs",[input("number",{name:"position",optional:true})]);__publicField(DflowNodeArgument,"outputs",[output()]);class DflowNodeData extends DflowNode{constructor(_e){var _f=_e,{node:_g}=_f,_h=_g,{outputs}=_h,node=__objRest(_h,["outputs"]),{host}=_f;super({node:__spreadProps(__spreadValues({},node),{outputs:outputs==null?void 0:outputs.map(output10=>__spreadProps(__spreadValues({},output10),{types:function inferDflowDataType(data){switch(true){case DflowData.isBoolean(data):return["boolean"];case DflowData.isNumber(data):return["number"];case DflowData.isString(data):return["string"];case DflowData.isArray(data):return["array"];case DflowData.isObject(data):return["object"];default:return[]}}(output10.data)}))}),host})}}__publicField(DflowNodeData,"kind","data");__publicField(DflowNodeData,"outputs",[output()]);class DflowNodeFunction extends DflowNode{constructor(arg){super(arg);this.output(0).data=this.id}}__publicField(DflowNodeFunction,"kind","function");__publicField(DflowNodeFunction,"outputs",[output("DflowId",{name:"id"})]);class DflowNodeReturn extends DflowNode{}__publicField(DflowNodeReturn,"kind","return");__publicField(DflowNodeReturn,"inputs",[input("DflowId",{name:"functionId"}),input([],{name:"value"})]);const coreNodesCatalog={[DflowNodeArgument.kind]:DflowNodeArgument,[DflowNodeData.kind]:DflowNodeData,[DflowNodeFunction.kind]:DflowNodeFunction,[DflowNodeReturn.kind]:DflowNodeReturn};class DflowError extends Error{constructor(arg,errorName){super(JSON.stringify(__spreadValues({error:errorName},arg)))}}class DflowErrorCannotConnectPins extends DflowError{constructor(arg){super(arg,"CannotConnectPins")}}class DflowErrorInvalidInputData extends DflowError{constructor(arg){super(arg,"InvalidInputData")}}class DflowErrorItemNotFound extends DflowError{constructor(arg){super(arg,"ItemNotFound")}}const{input:input1,output:output1}=DflowNode;class DflowArrayAt extends DflowNode{run(){const array=this.input(0).data;const index=this.input(1).data;this.output(0).data=array.at(index)}}__publicField(DflowArrayAt,"kind","arrayAt");__publicField(DflowArrayAt,"inputs",[input1("array"),input1("number",{name:"index"})]);__publicField(DflowArrayAt,"outputs",[output1()]);class DflowArrayFilter extends DflowNode{run(){this.output(0).data=this.input(0).data.filter((...args)=>this.host.executeFunction(this.input(1).data,args))}}__publicField(DflowArrayFilter,"kind","arrayFilter");__publicField(DflowArrayFilter,"inputs",[input1("array"),input1("DflowId",{name:"functionId"})]);__publicField(DflowArrayFilter,"outputs",[output1("array")]);class DflowArrayFindLastIndex extends DflowNode{run(){this.output(0).data=this.input(0).data.findLastIndex((...args)=>this.host.executeFunction(this.input(1).data,args))}}__publicField(DflowArrayFindLastIndex,"kind","arrayFindLastIndex");__publicField(DflowArrayFindLastIndex,"inputs",[input1("array"),input1("DflowId",{name:"functionId"})]);__publicField(DflowArrayFindLastIndex,"outputs",[output1("number")]);class DflowArrayFindIndex extends DflowNode{run(){this.output(0).data=this.input(0).data.findIndex((...args)=>this.host.executeFunction(this.input(1).data,args))}}__publicField(DflowArrayFindIndex,"kind","arrayFindIndex");__publicField(DflowArrayFindIndex,"inputs",[input1("array"),input1("DflowId",{name:"functionId"})]);__publicField(DflowArrayFindIndex,"outputs",[output1("number")]);class DflowArrayIncludes extends DflowNode{run(){const data=this.input(0).data;const element=this.input(1).data;if(Array.isArray(data)&&typeof element!=="undefined"){this.output(0).data=data.includes(element)}}}__publicField(DflowArrayIncludes,"kind","arrayIncludes");__publicField(DflowArrayIncludes,"inputs",[input1("array",{name:"array"}),input1("string",{name:"element"})]);__publicField(DflowArrayIncludes,"outputs",[output1("boolean")]);class DflowArrayJoin extends DflowNode{run(){this.output(0).data=this.input(0).data.join(this.input(1).data)}}__publicField(DflowArrayJoin,"kind","arrayJoin");__publicField(DflowArrayJoin,"inputs",[input1("array",{name:"array"}),input1("string",{name:"separator",optional:true})]);__publicField(DflowArrayJoin,"outputs",[output1("string")]);class DflowArrayLength extends DflowNode{run(){const data=this.input(0).data;if(Array.isArray(data)){this.output(0).data=data.length}else{this.output(0).clear}}}__publicField(DflowArrayLength,"kind","arrayLength");__publicField(DflowArrayLength,"inputs",[input1("array")]);__publicField(DflowArrayLength,"outputs",[output1("number")]);class DflowArrayMap extends DflowNode{run(){this.output(0).data=this.input(0).data.map((...args)=>this.host.executeFunction(this.input(1).data,args))}}__publicField(DflowArrayMap,"kind","arrayMap");__publicField(DflowArrayMap,"inputs",[input1("array"),input1("DflowId",{name:"functionId"})]);__publicField(DflowArrayMap,"outputs",[output1("array")]);class DflowArrayPop extends DflowNode{run(){const array=this.input(0).data.slice();const element=array.pop();this.output(0).data=element;this.output(1).data=array}}__publicField(DflowArrayPop,"kind","arrayPop");__publicField(DflowArrayPop,"inputs",[input1("array")]);__publicField(DflowArrayPop,"outputs",[output1([],{name:"element"}),output1("array",{name:"rest"})]);class DflowArrayPush extends DflowNode{run(){const array=this.input(0).data.slice();const element=this.input(1).data;if(element){array.push(element)}this.output(0).data=array}}__publicField(DflowArrayPush,"kind","arrayPush");__publicField(DflowArrayPush,"inputs",[input1("array"),input1([],{name:"element"})]);__publicField(DflowArrayPush,"outputs",[output1("array")]);class DflowArrayReverse extends DflowNode{run(){const array=this.input(0).data.slice();this.output(0).data=array.reverse()}}__publicField(DflowArrayReverse,"kind","arrayReverse");__publicField(DflowArrayReverse,"inputs",[input1("array")]);__publicField(DflowArrayReverse,"outputs",[input1("array")]);class DflowArrayShift extends DflowNode{run(){const array=this.input(0).data.slice();const element=array.shift();this.output(0).data=element;this.output(1).data=array}}__publicField(DflowArrayShift,"kind","arrayShift");__publicField(DflowArrayShift,"inputs",[input1("array")]);__publicField(DflowArrayShift,"outputs",[output1([],{name:"element"}),output1("array",{name:"rest"})]);class DflowArraySlice extends DflowNode{run(){const array=super.input(0).data;const start=super.input(1).data;const end=super.input(2).data;if(typeof end==="number"){super.output(0).data=array.slice(start,end)}else{super.output(0).data=array.slice(start)}}}__publicField(DflowArraySlice,"kind","arraySlice");__publicField(DflowArraySlice,"inputs",[input1("array"),input1("number",{name:"start"}),input1("number",{name:"end",optional:true})]);__publicField(DflowArraySlice,"outputs",[output1("array")]);const catalog={[DflowArrayAt.kind]:DflowArrayAt,[DflowArrayFilter.kind]:DflowArrayFilter,[DflowArrayFindLastIndex.kind]:DflowArrayFindLastIndex,[DflowArrayFindIndex.kind]:DflowArrayFindIndex,[DflowArrayIncludes.kind]:DflowArrayIncludes,[DflowArrayJoin.kind]:DflowArrayJoin,[DflowArrayLength.kind]:DflowArrayLength,[DflowArrayMap.kind]:DflowArrayMap,[DflowArrayPop.kind]:DflowArrayPop,[DflowArrayPush.kind]:DflowArrayPush,[DflowArrayReverse.kind]:DflowArrayReverse,[DflowArrayShift.kind]:DflowArrayShift,[DflowArraySlice.kind]:DflowArraySlice};const{input:input2,output:output2}=DflowNode;class DflowNodeIf extends DflowNode{run(){this.output(0).data=this.input(0).data?this.input(1).data:this.input(2).data}}__publicField(DflowNodeIf,"kind","if");__publicField(DflowNodeIf,"inputs",[input2([],{name:"condition"}),input2([],{name:"then"}),input2([],{name:"else"})]);__publicField(DflowNodeIf,"outputs",[output2()]);const catalog1={[DflowNodeIf.kind]:DflowNodeIf};const{input:input3}=DflowNode;class DflowConsoleLog extends DflowNode{run(){console.log(this.input(0).data)}}__publicField(DflowConsoleLog,"kind","consoleLog");__publicField(DflowConsoleLog,"inputs",[input3()]);const catalog2={[DflowConsoleLog.kind]:DflowConsoleLog};const{input:input4,output:output3}=DflowNode;const dateOutputs=[output3("string"),output3("number",{name:"milliseconds"})];class DflowDateNew extends DflowNode{run(){const input11=this.input(0).data;if(typeof input11==="string"||typeof input11==="number"){const date=new Date(input11);const serializedDate=date.toJSON();if(serializedDate!==null){this.output(0).data=serializedDate;this.output(1).data=date.getTime()}}const d=new Date;this.output(0).data=d.toJSON();this.output(1).data=d.getTime()}}__publicField(DflowDateNew,"kind","newDate");__publicField(DflowDateNew,"inputs",[input4(["string","number"],{optional:true})]);__publicField(DflowDateNew,"outputs",dateOutputs);class DflowDateNow extends DflowNode{run(){const now=Date.now();this.output(0).data=new Date(now).toJSON();this.output(1).data=now}}__publicField(DflowDateNow,"kind","now");__publicField(DflowDateNow,"outputs",dateOutputs);const catalog3={[DflowDateNew.kind]:DflowDateNew,[DflowDateNow.kind]:DflowDateNow};const{input:input5,output:output4}=DflowNode;class DflowNodeAnd extends DflowNode{run(){this.output(0).data=this.input(0).data&&this.input(1).data}}__publicField(DflowNodeAnd,"kind","and");__publicField(DflowNodeAnd,"inputs",[input5("boolean"),input5("boolean")]);__publicField(DflowNodeAnd,"outputs",[output4("boolean")]);class DflowNodeNot extends DflowNode{run(){this.output(0).data=!this.input(0).data}}__publicField(DflowNodeNot,"kind","not");__publicField(DflowNodeNot,"inputs",[input5("boolean")]);__publicField(DflowNodeNot,"outputs",[output4("boolean")]);class DflowNodeNullishCoaleshing extends DflowNode{run(){var _a;this.output(0).data=(_a=this.input(0).data)!=null?_a:this.input(1).data}}__publicField(DflowNodeNullishCoaleshing,"kind","??");__publicField(DflowNodeNullishCoaleshing,"inputs",[input5(),input5()]);__publicField(DflowNodeNullishCoaleshing,"outputs",[output4()]);class DflowNodeOr extends DflowNode{run(){this.output(0).data=this.input(0).data||this.input(1).data}}__publicField(DflowNodeOr,"kind","or");__publicField(DflowNodeOr,"inputs",[input5("boolean"),input5("boolean")]);__publicField(DflowNodeOr,"outputs",[output4("boolean")]);const catalog4={[DflowNodeAnd.kind]:DflowNodeAnd,[DflowNodeNot.kind]:DflowNodeNot,[DflowNodeNullishCoaleshing.kind]:DflowNodeNullishCoaleshing,[DflowNodeOr.kind]:DflowNodeOr};const{input:input6,output:output5}=DflowNode;class DflowMathAbs extends DflowNode{run(){this.output(0).data=Math.abs(this.input(0).data)}}__publicField(DflowMathAbs,"kind","mathAbs");__publicField(DflowMathAbs,"inputs",[input6("number")]);__publicField(DflowMathAbs,"outputs",[output5("number")]);class DflowMathCos extends DflowNode{run(){this.output(0).data=Math.cos(this.input(0).data)}}__publicField(DflowMathCos,"kind","mathCos");__publicField(DflowMathCos,"inputs",[input6("number")]);__publicField(DflowMathCos,"outputs",[output5("number")]);class DflowMathCosh extends DflowNode{run(){this.output(0).data=Math.cosh(this.input(0).data)}}__publicField(DflowMathCosh,"kind","mathCosh");__publicField(DflowMathCosh,"inputs",[input6("number")]);__publicField(DflowMathCosh,"outputs",[output5("number")]);class DflowMathFloor extends DflowNode{run(){this.output(0).data=Math.floor(this.input(0).data)}}__publicField(DflowMathFloor,"kind","mathFloor");__publicField(DflowMathFloor,"inputs",[input6("number")]);__publicField(DflowMathFloor,"outputs",[output5("number")]);class DflowMathMax extends DflowNode{run(){const list=this.input(0).data;const data=Math.max(...list);if(isNaN(data)){this.output(0).clear()}else{this.output(0).data=data}}}__publicField(DflowMathMax,"kind","mathMax");__publicField(DflowMathMax,"inputs",[input6("array")]);__publicField(DflowMathMax,"outputs",[output5("number")]);class DflowMathMin extends DflowNode{run(){const list=this.input(0).data;const data=Math.min(...list);if(isNaN(data)){this.output(0).clear()}else{this.output(0).data=data}}}__publicField(DflowMathMin,"kind","mathMin");__publicField(DflowMathMin,"inputs",[input6("array")]);__publicField(DflowMathMin,"outputs",[output5("number")]);class DflowMathPI extends DflowNode{}__publicField(DflowMathPI,"kind","mathPI");__publicField(DflowMathPI,"outputs",[output5("number",{name:"\u03C0",data:Math.PI})]);class DflowMathRound extends DflowNode{run(){this.output(0).data=Math.round(this.input(0).data)}}__publicField(DflowMathRound,"kind","mathRound");__publicField(DflowMathRound,"inputs",[input6("number")]);__publicField(DflowMathRound,"outputs",[output5("number")]);class DflowMathSin extends DflowNode{run(){this.output(0).data=Math.sin(this.input(0).data)}}__publicField(DflowMathSin,"kind","mathSin");__publicField(DflowMathSin,"inputs",[input6("number")]);__publicField(DflowMathSin,"outputs",[output5("number")]);class DflowMathSinh extends DflowNode{run(){this.output(0).data=Math.sinh(this.input(0).data)}}__publicField(DflowMathSinh,"kind","mathSinh");__publicField(DflowMathSinh,"inputs",[input6("number")]);__publicField(DflowMathSinh,"outputs",[output5("number")]);const catalog5={[DflowMathAbs.kind]:DflowMathAbs,[DflowMathCos.kind]:DflowMathCos,[DflowMathCosh.kind]:DflowMathCosh,[DflowMathFloor.kind]:DflowMathFloor,[DflowMathMax.kind]:DflowMathMax,[DflowMathMin.kind]:DflowMathMin,[DflowMathPI.kind]:DflowMathPI,[DflowMathRound.kind]:DflowMathRound,[DflowMathSin.kind]:DflowMathSin,[DflowMathSinh.kind]:DflowMathSinh};const{input:input7,output:output6}=DflowNode;class DflowIsFinite extends DflowNode{run(){this.output(0).data=Number.isFinite(this.input(0).data)}}__publicField(DflowIsFinite,"kind","isFinite");__publicField(DflowIsFinite,"inputs",[input7()]);__publicField(DflowIsFinite,"outputs",[output6("boolean")]);class DflowIsInteger extends DflowNode{run(){this.output(0).data=Number.isInteger(this.input(0).data)}}__publicField(DflowIsInteger,"kind","isInteger");__publicField(DflowIsInteger,"inputs",[input7()]);__publicField(DflowIsInteger,"outputs",[output6("boolean")]);class DflowIsNaN extends DflowNode{run(){this.output(0).data=Number.isNaN(this.input(0).data)}}__publicField(DflowIsNaN,"kind","isNaN");__publicField(DflowIsNaN,"inputs",[input7()]);__publicField(DflowIsNaN,"outputs",[output6("boolean")]);class DflowParseFloat extends DflowNode{run(){this.output(0).data=parseFloat(this.input(0).data)}}__publicField(DflowParseFloat,"kind","parseFloat");__publicField(DflowParseFloat,"inputs",[input7("string")]);__publicField(DflowParseFloat,"outputs",[output6("number")]);class DflowParseInt extends DflowNode{run(){this.output(0).data=parseInt(this.input(0).data)}}__publicField(DflowParseInt,"kind","parseInt");__publicField(DflowParseInt,"inputs",[input7(["number","string"])]);__publicField(DflowParseInt,"outputs",[output6("number")]);const catalog6={[DflowIsFinite.kind]:DflowIsFinite,[DflowIsInteger.kind]:DflowIsInteger,[DflowIsNaN.kind]:DflowIsNaN,[DflowParseFloat.kind]:DflowParseFloat,[DflowParseInt.kind]:DflowParseInt};const{input:input8,output:output7}=DflowNode;class DflowObjectKeys extends DflowNode{run(){this.output(0).data=Object.keys(this.input(0).data)}}__publicField(DflowObjectKeys,"kind","objectKeys");__publicField(DflowObjectKeys,"inputs",[input8("object")]);__publicField(DflowObjectKeys,"outputs",[output7("array")]);class DflowObjectValues extends DflowNode{run(){this.output(0).data=Object.values(this.input(0).data)}}__publicField(DflowObjectValues,"kind","objectValues");__publicField(DflowObjectValues,"inputs",[input8("object")]);__publicField(DflowObjectValues,"outputs",[output7("array")]);const catalog7={[DflowObjectKeys.kind]:DflowObjectKeys,[DflowObjectValues.kind]:DflowObjectValues};const{input:input9,output:output8}=DflowNode;class DflowAddition extends DflowNode{run(){this.output(0).data=this.input(0).data+this.input(1).data}}__publicField(DflowAddition,"kind","addition");__publicField(DflowAddition,"inputs",[input9("number"),input9("number")]);__publicField(DflowAddition,"outputs",[output8("number")]);class DflowDivision extends DflowNode{run(){if(this.input(1).data){this.output(0).data=this.input(0).data/this.input(1).data}else{this.output(0).clear()}}}__publicField(DflowDivision,"kind","division");__publicField(DflowDivision,"inputs",[input9("number"),input9("number")]);__publicField(DflowDivision,"outputs",[output8("number")]);class DflowEquality extends DflowNode{run(){this.output(0).data=this.input(0).data==this.input(1).data}}__publicField(DflowEquality,"kind","equality");__publicField(DflowEquality,"inputs",[input9(),input9()]);__publicField(DflowEquality,"outputs",[output8("boolean")]);class DflowLessThan extends DflowNode{run(){this.output(0).data=this.input(0).data<this.input(1).data}}__publicField(DflowLessThan,"kind","lessThan");__publicField(DflowLessThan,"inputs",[input9("number"),input9("number")]);__publicField(DflowLessThan,"outputs",[output8("boolean")]);class DflowLessThanOrEqual extends DflowNode{run(){this.output(0).data=this.input(0).data<=this.input(1).data}}__publicField(DflowLessThanOrEqual,"kind","lessThanOrEqual");__publicField(DflowLessThanOrEqual,"inputs",[input9("number"),input9("number")]);__publicField(DflowLessThanOrEqual,"outputs",[output8("boolean")]);class DflowGreaterThan extends DflowNode{run(){this.output(0).data=this.input(0).data>this.input(1).data}}__publicField(DflowGreaterThan,"kind","greaterThan");__publicField(DflowGreaterThan,"inputs",[input9("number"),input9("number")]);__publicField(DflowGreaterThan,"outputs",[output8("boolean")]);class DflowGreaterThanOrEqual extends DflowNode{run(){this.output(0).data=this.input(0).data>=this.input(1).data}}__publicField(DflowGreaterThanOrEqual,"kind","greaterThanOrEqual");__publicField(DflowGreaterThanOrEqual,"inputs",[input9("number"),input9("number")]);__publicField(DflowGreaterThanOrEqual,"outputs",[output8("boolean")]);class DflowInequality extends DflowNode{run(){this.output(0).data=this.input(0).data!=this.input(1).data}}__publicField(DflowInequality,"kind","inequality");__publicField(DflowInequality,"inputs",[input9(),input9()]);__publicField(DflowInequality,"outputs",[output8("boolean")]);class DflowMultiplication extends DflowNode{run(){this.output(0).data=this.input(0).data*this.input(1).data}}__publicField(DflowMultiplication,"kind","multiplication");__publicField(DflowMultiplication,"inputs",[input9("number"),input9("number")]);__publicField(DflowMultiplication,"outputs",[output8("number")]);class DflowSubtraction extends DflowNode{run(){this.output(0).data=this.input(0).data-this.input(1).data}}__publicField(DflowSubtraction,"kind","subtraction");__publicField(DflowSubtraction,"inputs",[input9("number"),input9("number")]);__publicField(DflowSubtraction,"outputs",[output8("number")]);const catalog8={[DflowAddition.kind]:DflowAddition,[DflowDivision.kind]:DflowDivision,[DflowEquality.kind]:DflowEquality,[DflowGreaterThan.kind]:DflowGreaterThan,[DflowGreaterThanOrEqual.kind]:DflowGreaterThanOrEqual,[DflowLessThan.kind]:DflowLessThan,[DflowLessThanOrEqual.kind]:DflowLessThanOrEqual,[DflowInequality.kind]:DflowInequality,[DflowMultiplication.kind]:DflowMultiplication,[DflowSubtraction.kind]:DflowSubtraction};const{input:input10,output:output9}=DflowNode;class DflowNodeStringLength extends DflowNode{run(){this.output(0).data=this.input(0).data.length}}__publicField(DflowNodeStringLength,"kind","stringLength");__publicField(DflowNodeStringLength,"inputs",[input10("string")]);__publicField(DflowNodeStringLength,"outputs",[output9("number")]);class DflowNodeSubstring extends DflowNode{run(){const str=this.input(0).data;const start=this.input(1).data;const end=this.input(2).data;this.output(0).data=str.substring(start,end)}}__publicField(DflowNodeSubstring,"kind","substring");__publicField(DflowNodeSubstring,"inputs",[input10("string"),input10("number",{name:"start"}),input10("number",{name:"end",optional:true})]);__publicField(DflowNodeSubstring,"outputs",[output9("string")]);const catalog9={[DflowNodeSubstring.kind]:DflowNodeSubstring,[DflowNodeStringLength.kind]:DflowNodeStringLength};const nodesCatalog=__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({},catalog),catalog1),catalog2),catalog3),catalog4),catalog5),catalog6),catalog7),catalog8),catalog9);export{nodesCatalog};
