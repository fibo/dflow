var x=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var V=Object.prototype.hasOwnProperty;var W=o=>x(o,"__esModule",{value:!0});var q=(o,t)=>{for(var e in t)x(o,e,{get:t[e],enumerable:!0})},Q=(o,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of L(t))!V.call(o,n)&&(e||n!=="default")&&x(o,n,{get:()=>t[n],enumerable:!(s=K(t,n))||s.enumerable});return o};var X=(o=>(t,e)=>o&&o.get(t)||(e=Q(W({}),t,1),o&&o.set(t,e),e))(typeof WeakMap!="undefined"?new WeakMap:0);var H={};q(H,{DflowData:()=>r,DflowEdge:()=>A,DflowGraph:()=>p,DflowHost:()=>m,DflowInput:()=>b,DflowItem:()=>I,DflowNode:()=>c,DflowOutput:()=>E,DflowPin:()=>h});const g=o=>`${o} must be a string`,j=(o,t)=>`${t} pin not found nodeId=${o}`,S=(o,t,e)=>`${j(o,t)} position=${e}`,v=(o,t,e)=>`${j(o,t)} pinId=${e}`,k=({id:o,kind:t,outputs:e},s)=>{const n={id:o,kind:t,outputs:e?.map(({id:i,data:u,name:d})=>({id:i,data:u,name:d}))};return s&&(n.error=s),n};class r{static isArray(t){return!!Array.isArray(t)}static isBoolean(t){return typeof t=="boolean"}static isDflowId(t){return r.isStringNotEmpty(t)}static isObject(t){return!(typeof t!="object"||!t||Array.isArray(t))}static isNumber(t){return typeof t=="number"&&!isNaN(t)}static isString(t){return typeof t=="string"}static isStringNotEmpty(t){return r.isString(t)&&t!==""}static validate(t,e){return e.length===0?!0:e.some(s=>{switch(s){case"array":return r.isArray(t);case"boolean":return r.isBoolean(t);case"number":return r.isNumber(t);case"object":return r.isObject(t);case"string":return r.isString(t);case"DflowId":return r.isDflowId(t);default:return!1}},!0)}}class I{id;name;static isDflowItem(t){if(typeof t!="object"||!t)return!1;const{id:e,name:s}=t;return r.isDflowId(e)&&(typeof s>"u"||r.isStringNotEmpty(s))}constructor({id:t,name:e}){this.id=t,this.name=e}toObject(){const t={id:this.id};return typeof this.name=="string"&&(t.name=this.name),t}}class h extends I{kind;types;static types=["string","number","boolean","object","array","DflowId"];static isDflowPin(t){if(typeof t!="object"||!t)return!1;const{types:e,...s}=t;return I.isDflowItem(s)&&h.isDflowPinTypes(e)}static isDflowPinType(t){return typeof t!="string"?!1:h.types.includes(t)}static isDflowPinTypes(t){return Array.isArray(t)?t.every(e=>h.isDflowPinType(e)):!1}constructor(t,{types:e=[],...s}){super(s);this.kind=t,this.types=e}get hasTypeAny(){return this.types.length===0}hasType(t){return this.hasTypeAny||this.types.includes(t)}toObject(){const t=super.toObject();return this.types.length>0&&(t.types=this.types),t}}class b extends h{#t;#e;#s;#n;static isDflowInput(t){if(typeof t!="object"||!t)return!1;const{id:e,types:s,optional:n,multi:i}=t;return h.isDflowPin({id:e,types:s})&&(typeof i>"u"||typeof i=="boolean")&&(typeof n>"u"||typeof n=="boolean")}constructor({multi:t,optional:e,...s}){super("input",s);this.#t=t,this.#e=e}get data(){if(this.#t){const t=Array.from(this.#n??[]);return t.length?t.map(e=>e.data):void 0}else return this.#s?.data}get isConnected(){return this.#t?Array.from(this.#n??[]).length>0:typeof this.#s>"u"}get isMulti(){return this.#t}get isOptional(){return this.#e}connectTo(t){const{hasTypeAny:e,types:s}=this,{types:n}=t;if(e||s.some(u=>n.includes(u)))this.#t?(this.#n||(this.#n=new Set),this.#n.add(t)):this.#s=t;else throw new Error(`mismatching pinTypes, source has types [${n.join()}] and target has types [${s.join()}]`)}disconnect(){this.#t?this.#n?.clear():this.#s=void 0}toObject(){return super.toObject()}}class E extends h{#t;static isDflowOutput({id:t,data:e,types:s=[]}){return h.isDflowPin({id:t,types:s})&&r.validate(e,s)}constructor({data:t,...e}){super("output",e);this.#t=t}clear(){this.#t=void 0}get data(){return this.#t}set data(t){switch(!0){case typeof t>"u":this.clear();break;case this.hasTypeAny:case(this.hasType("string")&&r.isString(t)):case(this.hasType("number")&&r.isNumber(t)):case(this.hasType("boolean")&&r.isBoolean(t)):case(this.hasType("object")&&r.isObject(t)):case(this.hasType("array")&&r.isArray(t)):case(this.hasType("DflowId")&&r.isDflowId(t)):{this.#t=t;break}default:throw new Error(`could not set data pinTypes=${JSON.stringify(this.types)} typeof=${typeof t}`)}}toObject(){const t=super.toObject();return typeof this.#t<"u"&&(t.data=this.#t),t}}class c extends I{#t=new Map;#e=new Map;#s=[];#n=[];kind;meta;host;static kind;static isAsync;static isConstant;static inputs;static outputs;static input(t=[],e){if(h.isDflowPinType(t))return{types:[t],...e};if(h.isDflowPinTypes(t))return{types:t,...e};throw new TypeError("invalid input definition")}static output(t=[],e){if(h.isDflowPinType(t))return{types:[t],...e};if(h.isDflowPinTypes(t))return{types:t,...e};throw new TypeError("invalid output definition")}static in(t=[],e){return[{types:t,...e}]}static out(t=[],e){return[{types:t,...e}]}static isDflowNode(t){if(typeof t!="object"||!t)return!1;const{kind:e,inputs:s=[],outputs:n=[],...i}=t;return I.isDflowItem(i)&&r.isStringNotEmpty(e)&&s.every(u=>b.isDflowInput(u))&&n.every(u=>E.isDflowOutput(u))}constructor({kind:t,inputs:e=[],outputs:s=[],...n},i,{isAsync:u=!1,isConstant:d=!1}={}){super(n);this.host=i,this.kind=t,this.meta={isAsync:u,isConstant:d};for(const f of e)this.newInput(f);for(const f of s)this.newOutput(f)}get inputs(){return this.#t.values()}get outputs(){return this.#e.values()}get numInputs(){return this.#t.size}get numOutputs(){return this.#e.size}clearOutputs(){for(const t of this.outputs)t.clear()}#i(t=this.numInputs){const e=`i${t}`;return this.#t.has(e)?this.#i(t+1):e}#o(t=this.numOutputs){const e=`o${t}`;return this.#e.has(e)?this.#o(t+1):e}getInputById(t){if(typeof t!="string")throw new TypeError(g("inputId"));const e=this.#t.get(t);if(e)return e;throw new Error(v(this.id,"input",t))}input(t){const e=this.#s[t];if(!e)throw new Error(S(this.id,"input",t));return this.getInputById(e)}getOutputById(t){if(typeof t!="string")throw new TypeError(g("outputId"));const e=this.#e.get(t);if(e)return e;throw new Error(v(this.id,"output",t))}output(t){const e=this.#n[t];if(!e)throw new Error(S(this.id,"output",t));return this.getOutputById(e)}deleteInput(t){this.host.deleteEdgesConnectedToPin([this.id,t]),this.#t.delete(t),this.#s.splice(this.#s.indexOf(t),1)}deleteOutput(t){this.host.deleteEdgesConnectedToPin([this.id,t]),this.#e.delete(t),this.#n.splice(this.#n.indexOf(t),1)}newInput(t){const e=r.isDflowId(t.id)?t.id:this.#i(),s=new b({...t,id:e});return this.#t.set(e,s),this.#s.push(e),s}newOutput(t){const e=r.isDflowId(t.id)?t.id:this.#o(),s=new E({...t,id:e});return this.#e.set(e,s),this.#n.push(e),s}run(){}toObject(){const t={...super.toObject(),kind:this.kind},e=[],s=[];for(const n of this.inputs)e.push(n.toObject());e.length>0&&(t.inputs=e);for(const n of this.outputs)s.push(n.toObject());return s.length>0&&(t.outputs=s),t}}class A extends I{source;target;static isDflowEdge(t){if(typeof t!="object"||!t)return!1;const{source:e,target:s,...n}=t;return!(I.isDflowItem(n)||!Array.isArray(e)||e.length!==2||r.isDflowId(e[0])||r.isDflowId(e[1])||!Array.isArray(s)||s.length!==2||r.isDflowId(s[0])||r.isDflowId(s[1]))}constructor({source:t,target:e,...s}){super(s);const[n,i]=t,[u,d]=e;if(typeof n!="string")throw new TypeError(g("sourceNodeId"));if(typeof i!="string")throw new TypeError(g("sourcePinId"));if(typeof u!="string")throw new TypeError(g("targetNodeId"));if(typeof d!="string")throw new TypeError(g("targetPinId"));this.source=t,this.target=e}toObject(){return{...super.toObject(),source:this.source,target:this.target}}}class p extends I{#t=new Map;#e=new Map;runOptions={verbose:!1};runStatus=null;executionReport=null;static childrenOfNodeId(t,e){return e.filter(({sourceId:s})=>t===s).map(({targetId:s})=>s)}static parentsOfNodeId(t,e){return e.filter(({targetId:s})=>t===s).map(({sourceId:s})=>s)}static levelOfNodeId(t,e){const s=p.parentsOfNodeId(t,e);if(s.length===0)return 0;let n=0;for(const i of s){const u=p.levelOfNodeId(i,e);n=Math.max(u,n)}return n+1}static ancestorsOfNodeId(t,e){const s=p.parentsOfNodeId(t,e);return s.length===0?[]:s.reduce((n,i,u,d)=>{const f=p.ancestorsOfNodeId(i,e),l=n.concat(f);return u===d.length-1?Array.from(new Set(d.concat(l))):l},[])}static sort(t,e){const s={};for(const n of t)s[n]=p.levelOfNodeId(n,e);return t.slice().sort((n,i)=>s[n]<=s[i]?-1:1)}get edges(){return this.#e.values()}get nodes(){return this.#t.values()}get nodeConnections(){return[...this.#e.values()].map(t=>({sourceId:t.source[0],targetId:t.target[0]}))}get edgeIds(){return[...this.#e.keys()]}get nodeIds(){return[...this.#t.keys()]}get numEdges(){return this.#e.size}get numNodes(){return this.#t.size}addEdge(t){if(this.#e.has(t.id))throw new Error(`cannot overwrite edge, id=${t.id}`);this.#e.set(t.id,t)}addNode(t){if(this.#t.has(t.id))throw new Error(`cannot overwrite node, id=${t.id}`);this.#t.set(t.id,t)}clear(){this.#t.clear(),this.#e.clear()}deleteEdge(t){this.#e.delete(t)}deleteNode(t){this.#t.delete(t)}getNodeById(t){if(typeof t!="string")throw new TypeError(g("nodeId"));const e=this.#t.get(t);if(e)return e;throw new Error(`DflowNode not found, id=${t}`)}getEdgeById(t){if(typeof t!="string")throw new TypeError(g("edgeId"));const e=this.#e.get(t);if(e)return e;throw new Error(`DflowEdge not found, id=${t}`)}generateEdgeId(t=this.numEdges){const e=`e${t}`;return this.#e.has(e)?this.generateEdgeId(t+1):e}generateNodeId(t=this.numNodes){const e=`n${t}`;return this.#t.has(e)?this.generateNodeId(t+1):e}nodeIdsInsideFunctions(){const t=[];for(const e of this.nodes)e.kind==="return"&&t.push(p.ancestorsOfNodeId(e.id,this.nodeConnections));return Array.from(new Set(t.flat()))}async run(){const{verbose:t}=this.runOptions;this.runStatus="waiting",this.executionReport={status:this.runStatus,start:new Date},t&&(this.executionReport.steps=[]);const e=this.nodeIdsInsideFunctions(),s=p.sort(this.nodeIds.filter(n=>!e.includes(n)),this.nodeConnections);e:for(const n of s){const i=this.#t.get(n);try{if(!i.meta.isConstant){let u=!1;t:for(const{id:d,data:f,types:l,isOptional:a}of i.inputs){if(a&&typeof f>"u")continue t;if(!r.validate(f,l)){u=!0,t&&this.executionReport.steps?.push(k(i.toObject(),`invalid input data nodeId=${n} inputId=${d} data=${f}`));break t}}if(u){for(const d of i.outputs)d.clear();continue e}i.meta.isAsync?await i.run():i.run()}t&&this.executionReport.steps?.push(k(i.toObject()))}catch(u){console.error(u),this.runStatus="failure"}}this.runStatus==="waiting"&&(this.runStatus="success"),this.executionReport.status=this.runStatus,this.executionReport.end=new Date}toObject(){const t={...super.toObject(),nodes:[],edges:[]};for(const e of this.nodes)t.nodes.push(e.toObject());for(const e of this.edges)t.edges.push(e.toObject());return t}}class m{#t;nodesCatalog;context;static#e(t=[]){return t.map((e,s)=>({...e,id:r.isDflowId(e.id)?e.id:`i${s}`}))}static#s(t=[]){return t.map((e,s)=>({...e,id:r.isDflowId(e.id)?e.id:`o${s}`}))}constructor(t={}){this.nodesCatalog={...t,...Z},this.#t=new p({id:"g1"}),this.context={}}get executionReport(){return this.#t.executionReport}get edges(){return this.#t.edges}get nodes(){return this.#t.nodes}get numEdges(){return this.#t.numEdges}get numNodes(){return this.#t.numNodes}get nodeKinds(){return Object.keys(this.nodesCatalog)}get runStatusIsSuccess(){return this.#t.runStatus==="success"}get runStatusIsWaiting(){return this.#t.runStatus==="waiting"}get runStatusIsFailure(){return this.#t.runStatus==="failure"}set verbose(t){this.#t.runOptions.verbose=t}clearGraph(){this.#t.clear()}connect(t,e=0){return{to:(s,n=0)=>{const i=this.#t.generateEdgeId(),u=t.output(e),d=s.input(n);this.newEdge({id:i,source:[t.id,u.id],target:[s.id,d.id]})}}}deleteEdge(t){if(typeof t!="string")throw new TypeError(g("edgeId"));const e=this.#t.getEdgeById(t);if(e){const[s,n]=e.target;this.getNodeById(s).getInputById(n).disconnect(),this.#t.deleteEdge(t)}else throw new Error(`DflowEdge not found, id=${t}`)}deleteNode(t){if(typeof t!="string")throw new TypeError(g("nodeId"));const e=this.getNodeById(t);if(e){for(const s of this.#t.edges){const{source:[n],target:[i]}=s;(n===e.id||i===e.id)&&this.deleteEdge(s.id)}this.#t.deleteNode(t)}else throw new Error(`DflowNode not found, id=${t}`)}deleteEdgesConnectedToPin([t,e]){for(const s of this.edges){const[n,i]=s.source,[u,d]=s.target;(n===t&&i===e||u===t&&d===e)&&this.deleteEdge(s.id)}}executeFunction(t,e){const{verbose:s}=this.#t.runOptions,n=this.#t.nodeConnections,i=p.childrenOfNodeId(t,n),u=[];for(const l of i){const a=this.getNodeById(l);a.kind===O.kind&&u.push(a.id)}const d=u.reduce((l,a,N,D)=>{const J=p.ancestorsOfNodeId(a,n),P=l.concat(J);return N===D.length?Array.from(new Set(P)):P},[]),f=p.sort([...u,...d],n);for(const l of f){const a=this.getNodeById(l);try{switch(a.kind){case T.kind:{const N=a.input(0).data,D=typeof N=="number"&&!isNaN(N)?Math.max(N,0):0;a.output(0).data=e[D];break}case O.kind:return a.input(1).data;default:!a.meta.isConstant&&!a.meta.isAsync&&a.run(),s&&this.executionReport?.steps?.push(k(a.toObject()))}}catch(N){console.error(N)}}}getEdgeById(t){return this.#t.getEdgeById(t)}getNodeById(t){return this.#t.getNodeById(t)}newNode(t){const e=this.nodesCatalog[t.kind]??Y,s=r.isDflowId(t.id)?t.id:this.#t.generateNodeId(),n={isAsync:e.isAsync,isConstant:e.isConstant},i=Array.isArray(t.inputs)?m.#e(t.inputs):m.#e(e.inputs??[]),u=Array.isArray(t.outputs)?m.#s(t.outputs):m.#s(e.outputs??[]),d=new e({...t,id:s,inputs:i,outputs:u},this,n);return this.#t.addNode(d),d}newEdge(t){const e=r.isDflowId(t.id)?t.id:this.#t.generateEdgeId(),s=new A({...t,id:e});this.#t.addEdge(s);const[n,i]=s.source,[u,d]=s.target,f=this.#t.getNodeById(n),l=this.#t.getNodeById(u),a=f.getOutputById(i);return l.getInputById(d).connectTo(a),s}newInput(t,e){return this.#t.getNodeById(t).newInput(e)}newOutput(t,e){return this.#t.getNodeById(t).newOutput(e)}toObject(){return this.#t.toObject()}async run(){await this.#t.run()}}const{input:y,output:w}=c;class T extends c{static kind="argument";static isConstant=!0;static inputs=[y("number",{name:"position",optional:!0})];static outputs=[w()]}class B extends c{static kind="array";static inputs=[y()];static outputs=[w("array")];run(){const t=this.input(0).data;r.isArray(t)?this.output(0).data=t:this.output(0).clear()}}class $ extends c{static kind="boolean";static inputs=[y()];static outputs=[w("boolean")];run(){const t=this.input(0).data;r.isBoolean(t)?this.output(0).data=t:this.output(0).clear()}}class C extends c{static kind="data";static isConstant=!0;static outputs=[w()]}class R extends c{static kind="function";static isConstant=!0;static outputs=[w("DflowId",{name:"id"})];constructor(...t){super(...t);this.output(0).data=this.id}}class M extends c{static kind="isUndefined";static inputs=[y()];static outputs=[w("boolean")];run(){this.output(0).data=typeof this.input(0).data>"u"}}class F extends c{static kind="number";static inputs=[y()];static outputs=[w("number")];run(){const t=this.input(0).data;r.isNumber(t)?this.output(0).data=t:this.output(0).clear()}}class z extends c{static kind="object";static inputs=[y()];static outputs=[w("object")];run(){const t=this.input(0).data;r.isObject(t)?this.output(0).data=t:this.output(0).clear()}}class O extends c{static kind="return";static isConstant=!0;static inputs=[y("DflowId",{name:"functionId"}),y([],{name:"value"})]}class U extends c{static kind="string";static inputs=[y()];static outputs=[w("string")];run(){const t=this.input(0).data;r.isString(t)?this.output(0).data=t:this.output(0).clear()}}class Y extends c{}const Z={[T.kind]:T,[B.kind]:B,[$.kind]:$,[C.kind]:C,[M.kind]:M,[F.kind]:F,[z.kind]:z,[R.kind]:R,[U.kind]:U,[O.kind]:O};module.exports=X(H);
