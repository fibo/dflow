var T=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var $=Object.prototype.hasOwnProperty;var C=o=>T(o,"__esModule",{value:!0});var R=(o,t)=>{for(var e in t)T(o,e,{get:t[e],enumerable:!0})},U=(o,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of k(t))!$.call(o,n)&&(e||n!=="default")&&T(o,n,{get:()=>t[n],enumerable:!(s=j(t,n))||s.enumerable});return o};var G=(o=>(t,e)=>o&&o.get(t)||(e=U(C({}),t,1),o&&o.set(t,e),e))(typeof WeakMap!="undefined"?new WeakMap:0);var M={};R(M,{DflowData:()=>i,DflowEdge:()=>I,DflowGraph:()=>a,DflowHost:()=>B,DflowInput:()=>N,DflowItem:()=>y,DflowNode:()=>p,DflowOutput:()=>m,DflowPin:()=>f,DflowUnknownNode:()=>O});const l=o=>`${o} must be a string`,A=o=>`${o} must be a number`,x=(o,t)=>`${t} pin not found nodeId=${o}`,D=(o,t,e)=>`${x(o,t)} position=${e}`,P=(o,t,e)=>`${x(o,t)} pinId=${e}`,E=({id:o,kind:t,outputs:e})=>({id:o,kind:t,outputs:e?.map(({id:s,data:n,name:r})=>({id:s,data:n,name:r}))});class i{static isArray(t){return Array.isArray(t)}static isBoolean(t){return typeof t=="boolean"}static isDflowGraph(t){return typeof t=="object"&&t!==null&&!Array.isArray(t)&&Array.isArray(t.nodes)&&Array.isArray(t.edges)&&a.isDflowGraph(t)}static isDflowId(t){return i.isStringNotEmpty(t)}static isDflowType(t){return typeof t=="string"&&f.types.includes(t)}static isObject(t){return!i.isUndefined(t)&&!i.isNull(t)&&!i.isArray(t)&&typeof t=="object"}static isNull(t){return t===null}static isNumber(t){return typeof t=="number"}static isString(t){return typeof t=="string"}static isStringNotEmpty(t){return i.isString(t)&&t.length>0}static isUndefined(t){return typeof t>"u"}static validate(t,e){return e.length===0?!0:e.some(s=>{switch(s){case"array":return i.isArray(t);case"boolean":return i.isBoolean(t);case"null":return i.isNull(t);case"number":return i.isNumber(t);case"object":return i.isObject(t);case"string":return i.isString(t);case"DflowGraph":return i.isDflowGraph(t);case"DflowId":return i.isDflowId(t);case"DflowType":return i.isDflowType(t);default:return!1}},!0)}}class y{id;name;static isDflowItem({id:t,name:e}){return i.isDflowId(t)&&(i.isUndefined(e)||i.isStringNotEmpty(e))}constructor({id:t,name:e}){this.id=t,this.name=e}toObject(){const t={id:this.id};return typeof this.name=="string"&&(t.name=this.name),t}}class f extends y{kind;types;static types=["string","number","boolean","null","object","array","DflowId","DflowGraph","DflowType"];static isDflowPin({types:t=[],...e}){return y.isDflowItem(e)&&t.every(s=>f.isDflowPinType(s))}static isDflowPinType(t){f.types.includes(t)}constructor(t,{types:e=[],...s}){super(s);this.kind=t,this.types=e}get hasTypeAny(){return this.types.length===0}get hasTypeDflowId(){return this.hasTypeAny||this.types.includes("DflowId")}get hasTypeDflowGraph(){return this.hasTypeAny||this.types.includes("DflowGraph")}get hasTypeDflowType(){return this.hasTypeAny||this.types.includes("DflowType")}get hasTypeString(){return this.hasTypeAny||this.types.includes("string")}get hasTypeNumber(){return this.hasTypeAny||this.types.includes("number")}get hasTypeBoolean(){return this.hasTypeAny||this.types.includes("boolean")}get hasTypeNull(){return this.hasTypeAny||this.types.includes("null")}get hasTypeObject(){return this.hasTypeAny||this.types.includes("object")}get hasTypeArray(){return this.hasTypeAny||this.types.includes("array")}addType(t){this.types.push(t)}removeType(t){this.types.splice(this.types.indexOf(t),1)}}class N extends f{#t;#e;static isDflowInput({id:t,types:e}){return f.isDflowPin({id:t,types:e})}constructor({optional:t,...e}){super("input",e);this.#e=t}get data(){return this.#t?.data}get isConnected(){return typeof this.#t>"u"}get isOptional(){return this.#e}connectTo(t){const{hasTypeAny:e,types:s}=this,{types:n}=t;if(e||s.some(r=>n.includes(r)))this.#t=t;else throw new Error(`mismatching pinTypes, source has types [${n.join()}] and target has types [${s.join()}]`)}disconnect(){this.#t=void 0}toObject(){const t={id:this.id};return this.types.length>0&&(t.types=this.types),t}}class m extends f{#t;static isDflowOutput({id:t,data:e,types:s=[]}){return f.isDflowPin({id:t,types:s})&&i.validate(e,s)}constructor({data:t,...e}){super("output",e);this.#t=t}clear(){this.#t=void 0}get data(){return this.#t}set data(t){switch(!0){case i.isUndefined(t):this.clear();break;case this.hasTypeAny:case(i.isDflowGraph(t)&&this.hasTypeDflowGraph):case(i.isDflowId(t)&&this.hasTypeDflowId):case(i.isString(t)&&this.hasTypeString):case(i.isNumber(t)&&this.hasTypeNumber):case(i.isBoolean(t)&&this.hasTypeBoolean):case(i.isNull(t)&&this.hasTypeNull):case(i.isObject(t)&&this.hasTypeObject):case(i.isArray(t)&&this.hasTypeArray):{this.#t=t;break}default:throw new Error(`could not set data pinTypes=${JSON.stringify(this.types)} typeof=${typeof t}`)}}toObject(){const t={...super.toObject()};return i.isUndefined(this.#t)||(t.data=this.#t),this.types.length>0&&(t.types=this.types),t}}class p extends y{#t=new Map;#e=new Map;#s=[];#n=[];#r;kind;meta;host;static kind;static isAsync;static isConstant;static label;static inputs;static outputs;static generateInputIds(t=[]){return t.map((e,s)=>({...e,id:`i${s}`}))}static generateOutputIds(t=[]){return t.map((e,s)=>({...e,id:`o${s}`}))}static in(t=[],e){return[{types:t,...e}]}static ins(t,e=[]){return Array(t).fill(p.in(e)).flat()}static out(t=[],e){return[{types:t,...e}]}static outs(t,e=[]){return Array(t).fill(p.out(e)).flat()}static outputNumber(t){return{...t,types:["number"]}}static isDflowNode({kind:t,inputs:e=[],outputs:s=[],...n}){return y.isDflowItem(n)&&i.isStringNotEmpty(t)&&e.every(r=>N.isDflowInput(r))&&s.every(r=>m.isDflowOutput(r))}constructor({kind:t,inputs:e=[],outputs:s=[],...n},r,{isAsync:u=!1,isConstant:d=!1,label:g}={}){super(n);this.#r=g,this.host=r,this.kind=t,this.meta={isAsync:u,isConstant:d};for(const c of e)this.newInput(c);for(const c of s)this.newOutput(c);this.onCreate()}get label(){return this.#r||this.kind}get inputs(){return this.#t.values()}get outputs(){return this.#e.values()}get numInputs(){return this.#t.size}get numOutputs(){return this.#e.size}clearOutputs(){for(const t of this.outputs)t.clear()}#i(t=this.numInputs){const e=`i${t}`;return this.#t.has(e)?this.#i(t+1):e}#o(t=this.numOutputs){const e=`o${t}`;return this.#e.has(e)?this.#o(t+1):e}getInputById(t){if(typeof t!="string")throw new TypeError(l("inputId"));const e=this.#t.get(t);if(e instanceof N)return e;throw new Error(P(this.id,"input",t))}input(t){if(typeof t!="number")throw new TypeError(A("position"));const e=this.#s[t];if(i.isUndefined(e))throw new Error(D(this.id,"input",t));return this.getInputById(e)}getOutputById(t){if(typeof t!="string")throw new TypeError(l("outputId"));const e=this.#e.get(t);if(e instanceof m)return e;throw new Error(P(this.id,"output",t))}output(t){if(typeof t!="number")throw new TypeError(A("position"));const e=this.#n[t];if(i.isUndefined(e))throw new Error(D(this.id,"output",t));return this.getOutputById(e)}deleteInput(t){this.host.deleteEdgesConnectedToPin([this.id,t]),this.#t.delete(t),this.#s.splice(this.#s.indexOf(t),1)}deleteOutput(t){this.host.deleteEdgesConnectedToPin([this.id,t]),this.#e.delete(t),this.#n.splice(this.#n.indexOf(t),1)}onBeforeConnectInput(t,e){}onCreate(){}newInput(t){const e=i.isDflowId(t.id)?t.id:this.#i(),s=new N({...t,id:e});return this.#t.set(e,s),this.#s.push(e),s}newOutput(t){const e=i.isDflowId(t.id)?t.id:this.#o(),s=new m({...t,id:e});return this.#e.set(e,s),this.#n.push(e),s}run(){}toObject(){const t={...super.toObject(),kind:this.kind},e=[],s=[];for(const n of this.inputs)e.push(n.toObject());e.length>0&&(t.inputs=e);for(const n of this.outputs)s.push(n.toObject());return s.length>0&&(t.outputs=s),t}}class O extends p{static kind="Unknown";constructor(t,e){super({...t,kind:O.kind},e)}run(){}}class I extends y{source;target;static isDflowEdge({source:t,target:e,...s},n){return y.isDflowItem(s)&&Array.isArray(t)&&t.length===2&&n.nodes.find(({id:r,outputs:u=[]})=>r===t[0]&&u.find(({id:d})=>d===t[1]))&&Array.isArray(e)&&e.length===2&&n.nodes.find(({id:r,inputs:u=[]})=>r===e[0]&&u.find(({id:d})=>d===e[1]))}constructor({source:t,target:e,...s}){super(s);const[n,r]=t,[u,d]=e;if(typeof n!="string")throw new TypeError(l("sourceNodeId"));if(typeof r!="string")throw new TypeError(l("sourcePinId"));if(typeof u!="string")throw new TypeError(l("targetNodeId"));if(typeof d!="string")throw new TypeError(l("targetPinId"));this.source=t,this.target=e}toObject(){return{...super.toObject(),source:this.source,target:this.target}}}class a extends y{#t=new Map;#e=new Map;runOptions={verbose:!1};runStatus=null;executionReport=null;static isDflowGraph(t){return t.nodes.every(e=>p.isDflowNode(e))&&t.edges.every(e=>I.isDflowEdge(e,t))}static childrenOfNodeId(t,e){return e.filter(({sourceId:s})=>t===s).map(({targetId:s})=>s)}static parentsOfNodeId(t,e){return e.filter(({targetId:s})=>t===s).map(({sourceId:s})=>s)}static levelOfNodeId(t,e){const s=a.parentsOfNodeId(t,e);if(s.length===0)return 0;let n=0;for(const r of s){const u=a.levelOfNodeId(r,e);n=Math.max(u,n)}return n+1}static ancestorsOfNodeId(t,e){const s=a.parentsOfNodeId(t,e);return s.length===0?[]:s.reduce((n,r,u,d)=>{const g=a.ancestorsOfNodeId(r,e),c=n.concat(g);return u===d.length-1?Array.from(new Set(d.concat(c))):c},[])}static sort(t,e){const s={};for(const n of t)s[n]=a.levelOfNodeId(n,e);return t.slice().sort((n,r)=>s[n]<=s[r]?-1:1)}get edges(){return this.#e.values()}get nodes(){return this.#t.values()}get nodeConnections(){return[...this.#e.values()].map(t=>({sourceId:t.source[0],targetId:t.target[0]}))}get edgeIds(){return[...this.#e.keys()]}get nodeIds(){return[...this.#t.keys()]}get numEdges(){return this.#e.size}get numNodes(){return this.#t.size}addEdge(t){if(this.#e.has(t.id))throw new Error(`cannot overwrite edge, id=${t.id}`);this.#e.set(t.id,t)}addNode(t){if(this.#t.has(t.id))throw new Error(`cannot overwrite node, id=${t.id}`);this.#t.set(t.id,t)}clear(){this.#t.clear(),this.#e.clear()}deleteEdge(t){this.#e.delete(t)}deleteNode(t){this.#t.delete(t)}getNodeById(t){if(typeof t!="string")throw new TypeError(l("nodeId"));const e=this.#t.get(t);if(e instanceof p)return e;throw new Error(`DflowNode not found, id=${t}`)}getEdgeById(t){if(typeof t!="string")throw new TypeError(l("edgeId"));const e=this.#e.get(t);if(e instanceof I)return e;throw new Error(`DflowEdge not found, id=${t}`)}generateEdgeId(t=this.numEdges){const e=`e${t}`;return this.#e.has(e)?this.generateEdgeId(t+1):e}generateNodeId(t=this.numNodes){const e=`n${t}`;return this.#t.has(e)?this.generateNodeId(t+1):e}nodeIdsInsideFunctions(){const t=[];for(const e of this.nodes)e.kind==="return"&&t.push(a.ancestorsOfNodeId(e.id,this.nodeConnections));return Array.from(new Set(t.flat()))}async run(){const{verbose:t}=this.runOptions;this.runStatus="waiting",this.executionReport={status:this.runStatus,start:new Date},t&&(this.executionReport.steps=[]);const e=this.nodeIdsInsideFunctions(),s=a.sort(this.nodeIds.filter(n=>!e.includes(n)),this.nodeConnections);e:for(const n of s){const r=this.#t.get(n);try{if(!r.meta.isConstant){let u=!1;t:for(const{data:d,types:g,isOptional:c}of r.inputs){if(c&&typeof d>"u")continue t;if(!i.validate(d,g)){u=!0;break t}}if(u){for(const d of r.outputs)d.clear();t&&this.executionReport.steps?.push(E(r.toObject()));continue e}r.meta.isAsync?await r.run():r.run()}t&&this.executionReport.steps?.push(E(r.toObject()))}catch(u){console.error(u),this.runStatus="failure"}}this.runStatus==="waiting"&&(this.runStatus="success"),this.executionReport.status=this.runStatus,this.executionReport.end=new Date}toObject(){const t={...super.toObject(),nodes:[],edges:[]};for(const e of this.nodes)t.nodes.push(e.toObject());for(const e of this.edges)t.edges.push(e.toObject());return t}}class B{#t;#e;context;constructor(t={}){this.#e=t,this.#t=new a({id:"g1"}),this.context={}}get executionReport(){return this.#t.executionReport}get edges(){return this.#t.edges}get nodes(){return this.#t.nodes}get numEdges(){return this.#t.numEdges}get numNodes(){return this.#t.numNodes}get nodeKinds(){return Object.keys(this.#e)}get runStatusIsSuccess(){return this.#t.runStatus==="success"}get runStatusIsWaiting(){return this.#t.runStatus==="waiting"}get runStatusIsFailure(){return this.#t.runStatus==="failure"}set verbose(t){this.#t.runOptions.verbose=t}clearGraph(){this.#t.clear()}connect(t,e=0){return{to:(s,n=0)=>{const r=this.#t.generateEdgeId(),u=t.output(e),d=s.input(n);s.onBeforeConnectInput(t,e),this.newEdge({id:r,source:[t.id,u.id],target:[s.id,d.id]})}}}deleteEdge(t){if(typeof t!="string")throw new TypeError(l("edgeId"));const e=this.#t.getEdgeById(t);if(e instanceof I){const[s,n]=e.target;this.getNodeById(s).getInputById(n).disconnect(),this.#t.deleteEdge(t)}else throw new Error(`DflowEdge not found, id=${t}`)}deleteNode(t){if(typeof t!="string")throw new TypeError(l("nodeId"));const e=this.getNodeById(t);if(e instanceof p){for(const s of this.#t.edges){const{source:[n],target:[r]}=s;(n===e.id||r===e.id)&&this.deleteEdge(s.id)}this.#t.deleteNode(t)}else throw new Error(`DflowNode not found, id=${t}`)}deleteEdgesConnectedToPin([t,e]){for(const s of this.edges){const[n,r]=s.source,[u,d]=s.target;(n===t&&r===e||u===t&&d===e)&&this.deleteEdge(s.id)}}executeFunction(t,e){const{verbose:s}=this.#t.runOptions,n=this.#t.nodeConnections,r=a.childrenOfNodeId(t,n),u=[];for(const c of r){const h=this.getNodeById(c);h.kind==="return"&&u.push(h.id)}const d=u.reduce((c,h,w,S)=>{const v=a.ancestorsOfNodeId(h,n),b=c.concat(v);return w===S.length?Array.from(new Set(b)):b},[]),g=a.sort([...u,...d],n);for(const c of g){const h=this.getNodeById(c);try{switch(h.kind){case"argument":{const w=Math.max(h.input(1).data??0,0);h.output(0).data=e[w];break}case"return":return h.input(1).data;default:!h.meta.isConstant&&!h.meta.isAsync&&h.run(),s&&this.executionReport?.steps?.push(E(h.toObject()))}}catch(w){console.error(w)}}}getEdgeById(t){return this.#t.getEdgeById(t)}getNodeById(t){return this.#t.getNodeById(t)}newNode(t){const e=this.#e[t.kind]??O,s=i.isDflowId(t.id)?t.id:this.#t.generateNodeId(),n={isAsync:e.isAsync,isConstant:e.isConstant,label:e.label},r=Array.isArray(t.inputs)?t.inputs:p.generateInputIds(e.inputs),u=Array.isArray(t.outputs)?t.outputs:p.generateOutputIds(e.outputs),d=new e({...t,id:s,inputs:r,outputs:u},this,n);return this.#t.addNode(d),d}newEdge(t){const e=i.isDflowId(t.id)?t.id:this.#t.generateEdgeId(),s=new I({...t,id:e});this.#t.addEdge(s);const[n,r]=s.source,[u,d]=s.target,g=this.#t.getNodeById(n),c=this.#t.getNodeById(u),h=g.getOutputById(r);return c.getInputById(d).connectTo(h),s}newInput(t,e){return this.#t.getNodeById(t).newInput(e)}newOutput(t,e){return this.#t.getNodeById(t).newOutput(e)}toObject(){return this.#t.toObject()}async run(){await this.#t.run()}}module.exports=G(M);
