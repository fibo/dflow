var E=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var K=Object.getOwnPropertyNames;var J=Object.prototype.hasOwnProperty;var L=r=>E(r,"__esModule",{value:!0});var V=(r,t)=>{for(var e in t)E(r,e,{get:t[e],enumerable:!0})},W=(r,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of K(t))!J.call(r,n)&&(e||n!=="default")&&E(r,n,{get:()=>t[n],enumerable:!(s=H(t,n))||s.enumerable});return r};var q=(r=>(t,e)=>r&&r.get(t)||(e=W(L({}),t,1),r&&r.set(t,e),e))(typeof WeakMap!="undefined"?new WeakMap:0);var X={};V(X,{DflowData:()=>o,DflowEdge:()=>I,DflowGraph:()=>p,DflowHost:()=>M,DflowInput:()=>N,DflowItem:()=>y,DflowNode:()=>u,DflowOutput:()=>m,DflowPin:()=>f,DflowUnknownNode:()=>b});const l=r=>`${r} must be a string`,D=r=>`${r} must be a number`,P=(r,t)=>`${t} pin not found nodeId=${r}`,S=(r,t,e)=>`${P(r,t)} position=${e}`,B=(r,t,e)=>`${P(r,t)} pinId=${e}`,A=({id:r,kind:t,outputs:e})=>({id:r,kind:t,outputs:e?.map(({id:s,data:n,name:i})=>({id:s,data:n,name:i}))});class o{static isArray(t){return Array.isArray(t)}static isBoolean(t){return typeof t=="boolean"}static isDflowGraph(t){return typeof t=="object"&&t!==null&&!Array.isArray(t)&&Array.isArray(t.nodes)&&Array.isArray(t.edges)&&p.isDflowGraph(t)}static isDflowId(t){return o.isStringNotEmpty(t)}static isDflowType(t){return typeof t=="string"&&f.types.includes(t)}static isObject(t){return!o.isUndefined(t)&&!o.isNull(t)&&!o.isArray(t)&&typeof t=="object"}static isNull(t){return t===null}static isNumber(t){return typeof t=="number"}static isString(t){return typeof t=="string"}static isStringNotEmpty(t){return o.isString(t)&&t.length>0}static isUndefined(t){return typeof t>"u"}static validate(t,e){return e.length===0?!0:e.some(s=>{switch(s){case"array":return o.isArray(t);case"boolean":return o.isBoolean(t);case"null":return o.isNull(t);case"number":return o.isNumber(t);case"object":return o.isObject(t);case"string":return o.isString(t);case"DflowGraph":return o.isDflowGraph(t);case"DflowId":return o.isDflowId(t);case"DflowType":return o.isDflowType(t);default:return!1}},!0)}}class y{id;name;static isDflowItem({id:t,name:e}){return o.isDflowId(t)&&(o.isUndefined(e)||o.isStringNotEmpty(e))}constructor({id:t,name:e}){this.id=t,this.name=e}toObject(){const t={id:this.id};return typeof this.name=="string"&&(t.name=this.name),t}}class f extends y{kind;types;static types=["string","number","boolean","null","object","array","DflowId","DflowGraph","DflowType"];static isDflowPin({types:t=[],...e}){return y.isDflowItem(e)&&t.every(s=>f.isDflowPinType(s))}static isDflowPinType(t){f.types.includes(t)}constructor(t,{types:e=[],...s}){super(s);this.kind=t,this.types=e}get hasTypeAny(){return this.types.length===0}get hasTypeDflowId(){return this.hasTypeAny||this.types.includes("DflowId")}get hasTypeDflowGraph(){return this.hasTypeAny||this.types.includes("DflowGraph")}get hasTypeDflowType(){return this.hasTypeAny||this.types.includes("DflowType")}get hasTypeString(){return this.hasTypeAny||this.types.includes("string")}get hasTypeNumber(){return this.hasTypeAny||this.types.includes("number")}get hasTypeBoolean(){return this.hasTypeAny||this.types.includes("boolean")}get hasTypeNull(){return this.hasTypeAny||this.types.includes("null")}get hasTypeObject(){return this.hasTypeAny||this.types.includes("object")}get hasTypeArray(){return this.hasTypeAny||this.types.includes("array")}addType(t){this.types.push(t)}removeType(t){this.types.splice(this.types.indexOf(t),1)}}class N extends f{#t;#e;static isDflowInput({id:t,types:e}){return f.isDflowPin({id:t,types:e})}constructor({optional:t,...e}){super("input",e);this.#e=t}get data(){return this.#t?.data}get isConnected(){return typeof this.#t>"u"}get isOptional(){return this.#e}connectTo(t){const{hasTypeAny:e,types:s}=this,{types:n}=t;if(e||s.some(i=>n.includes(i)))this.#t=t;else throw new Error(`mismatching pinTypes, source has types [${n.join()}] and target has types [${s.join()}]`)}disconnect(){this.#t=void 0}toObject(){const t={id:this.id};return this.types.length>0&&(t.types=this.types),t}}class m extends f{#t;static isDflowOutput({id:t,data:e,types:s=[]}){return f.isDflowPin({id:t,types:s})&&o.validate(e,s)}constructor({data:t,...e}){super("output",e);this.#t=t}clear(){this.#t=void 0}get data(){return this.#t}set data(t){switch(!0){case o.isUndefined(t):this.clear();break;case this.hasTypeAny:case(o.isDflowGraph(t)&&this.hasTypeDflowGraph):case(o.isDflowId(t)&&this.hasTypeDflowId):case(o.isString(t)&&this.hasTypeString):case(o.isNumber(t)&&this.hasTypeNumber):case(o.isBoolean(t)&&this.hasTypeBoolean):case(o.isNull(t)&&this.hasTypeNull):case(o.isObject(t)&&this.hasTypeObject):case(o.isArray(t)&&this.hasTypeArray):{this.#t=t;break}default:throw new Error(`could not set data pinTypes=${JSON.stringify(this.types)} typeof=${typeof t}`)}}toObject(){const t={...super.toObject()};return o.isUndefined(this.#t)||(t.data=this.#t),this.types.length>0&&(t.types=this.types),t}}class u extends y{#t=new Map;#e=new Map;#s=[];#n=[];#i;kind;meta;host;static kind;static isAsync;static isConstant;static label;static inputs;static outputs;static generateInputIds(t=[]){return t.map((e,s)=>({...e,id:`i${s}`}))}static generateOutputIds(t=[]){return t.map((e,s)=>({...e,id:`o${s}`}))}static in(t=[],e){return[{types:t,...e}]}static ins(t,e=[]){return Array(t).fill(u.in(e)).flat()}static out(t=[],e){return[{types:t,...e}]}static outs(t,e=[]){return Array(t).fill(u.out(e)).flat()}static outputNumber(t){return{...t,types:["number"]}}static isDflowNode({kind:t,inputs:e=[],outputs:s=[],...n}){return y.isDflowItem(n)&&o.isStringNotEmpty(t)&&e.every(i=>N.isDflowInput(i))&&s.every(i=>m.isDflowOutput(i))}constructor({kind:t,inputs:e=[],outputs:s=[],...n},i,{isAsync:d=!1,isConstant:a=!1,label:g}={}){super(n);this.#i=g,this.host=i,this.kind=t,this.meta={isAsync:d,isConstant:a};for(const c of e)this.newInput(c);for(const c of s)this.newOutput(c);this.onCreate()}get label(){return this.#i||this.kind}get inputs(){return this.#t.values()}get outputs(){return this.#e.values()}get numInputs(){return this.#t.size}get numOutputs(){return this.#e.size}clearOutputs(){for(const t of this.outputs)t.clear()}#r(t=this.numInputs){const e=`i${t}`;return this.#t.has(e)?this.#r(t+1):e}#o(t=this.numOutputs){const e=`o${t}`;return this.#e.has(e)?this.#o(t+1):e}getInputById(t){if(typeof t!="string")throw new TypeError(l("inputId"));const e=this.#t.get(t);if(e instanceof N)return e;throw new Error(B(this.id,"input",t))}input(t){if(typeof t!="number")throw new TypeError(D("position"));const e=this.#s[t];if(o.isUndefined(e))throw new Error(S(this.id,"input",t));return this.getInputById(e)}getOutputById(t){if(typeof t!="string")throw new TypeError(l("outputId"));const e=this.#e.get(t);if(e instanceof m)return e;throw new Error(B(this.id,"output",t))}output(t){if(typeof t!="number")throw new TypeError(D("position"));const e=this.#n[t];if(o.isUndefined(e))throw new Error(S(this.id,"output",t));return this.getOutputById(e)}deleteInput(t){this.host.deleteEdgesConnectedToPin([this.id,t]),this.#t.delete(t),this.#s.splice(this.#s.indexOf(t),1)}deleteOutput(t){this.host.deleteEdgesConnectedToPin([this.id,t]),this.#e.delete(t),this.#n.splice(this.#n.indexOf(t),1)}onCreate(){}newInput(t){const e=o.isDflowId(t.id)?t.id:this.#r(),s=new N({...t,id:e});return this.#t.set(e,s),this.#s.push(e),s}newOutput(t){const e=o.isDflowId(t.id)?t.id:this.#o(),s=new m({...t,id:e});return this.#e.set(e,s),this.#n.push(e),s}run(){}toObject(){const t={...super.toObject(),kind:this.kind},e=[],s=[];for(const n of this.inputs)e.push(n.toObject());e.length>0&&(t.inputs=e);for(const n of this.outputs)s.push(n.toObject());return s.length>0&&(t.outputs=s),t}}class b extends u{static kind="Unknown";constructor(t,e){super({...t,kind:b.kind},e)}run(){}}class I extends y{source;target;static isDflowEdge({source:t,target:e,...s},n){return y.isDflowItem(s)&&Array.isArray(t)&&t.length===2&&n.nodes.find(({id:i,outputs:d=[]})=>i===t[0]&&d.find(({id:a})=>a===t[1]))&&Array.isArray(e)&&e.length===2&&n.nodes.find(({id:i,inputs:d=[]})=>i===e[0]&&d.find(({id:a})=>a===e[1]))}constructor({source:t,target:e,...s}){super(s);const[n,i]=t,[d,a]=e;if(typeof n!="string")throw new TypeError(l("sourceNodeId"));if(typeof i!="string")throw new TypeError(l("sourcePinId"));if(typeof d!="string")throw new TypeError(l("targetNodeId"));if(typeof a!="string")throw new TypeError(l("targetPinId"));this.source=t,this.target=e}toObject(){return{...super.toObject(),source:this.source,target:this.target}}}class p extends y{#t=new Map;#e=new Map;runOptions={verbose:!1};runStatus=null;executionReport=null;static isDflowGraph(t){return t.nodes.every(e=>u.isDflowNode(e))&&t.edges.every(e=>I.isDflowEdge(e,t))}static childrenOfNodeId(t,e){return e.filter(({sourceId:s})=>t===s).map(({targetId:s})=>s)}static parentsOfNodeId(t,e){return e.filter(({targetId:s})=>t===s).map(({sourceId:s})=>s)}static levelOfNodeId(t,e){const s=p.parentsOfNodeId(t,e);if(s.length===0)return 0;let n=0;for(const i of s){const d=p.levelOfNodeId(i,e);n=Math.max(d,n)}return n+1}static ancestorsOfNodeId(t,e){const s=p.parentsOfNodeId(t,e);return s.length===0?[]:s.reduce((n,i,d,a)=>{const g=p.ancestorsOfNodeId(i,e),c=n.concat(g);return d===a.length-1?Array.from(new Set(a.concat(c))):c},[])}static sort(t,e){const s={};for(const n of t)s[n]=p.levelOfNodeId(n,e);return t.slice().sort((n,i)=>s[n]<=s[i]?-1:1)}get edges(){return this.#e.values()}get nodes(){return this.#t.values()}get nodeConnections(){return[...this.#e.values()].map(t=>({sourceId:t.source[0],targetId:t.target[0]}))}get edgeIds(){return[...this.#e.keys()]}get nodeIds(){return[...this.#t.keys()]}get numEdges(){return this.#e.size}get numNodes(){return this.#t.size}addEdge(t){if(this.#e.has(t.id))throw new Error(`cannot overwrite edge, id=${t.id}`);this.#e.set(t.id,t)}addNode(t){if(this.#t.has(t.id))throw new Error(`cannot overwrite node, id=${t.id}`);this.#t.set(t.id,t)}clear(){this.#t.clear(),this.#e.clear()}deleteEdge(t){this.#e.delete(t)}deleteNode(t){this.#t.delete(t)}getNodeById(t){if(typeof t!="string")throw new TypeError(l("nodeId"));const e=this.#t.get(t);if(e instanceof u)return e;throw new Error(`DflowNode not found, id=${t}`)}getEdgeById(t){if(typeof t!="string")throw new TypeError(l("edgeId"));const e=this.#e.get(t);if(e instanceof I)return e;throw new Error(`DflowEdge not found, id=${t}`)}generateEdgeId(t=this.numEdges){const e=`e${t}`;return this.#e.has(e)?this.generateEdgeId(t+1):e}generateNodeId(t=this.numNodes){const e=`n${t}`;return this.#t.has(e)?this.generateNodeId(t+1):e}nodeIdsInsideFunctions(){const t=[];for(const e of this.nodes)e.kind==="return"&&t.push(p.ancestorsOfNodeId(e.id,this.nodeConnections));return Array.from(new Set(t.flat()))}async run(){const{verbose:t}=this.runOptions;this.runStatus="waiting",this.executionReport={status:this.runStatus,start:new Date},t&&(this.executionReport.steps=[]);const e=this.nodeIdsInsideFunctions(),s=p.sort(this.nodeIds.filter(n=>!e.includes(n)),this.nodeConnections);e:for(const n of s){const i=this.#t.get(n);try{if(!i.meta.isConstant){let d=!1;t:for(const{data:a,types:g,isOptional:c}of i.inputs){if(c&&typeof a>"u")continue t;if(!o.validate(a,g)){d=!0;break t}}if(d){for(const a of i.outputs)a.clear();t&&this.executionReport.steps?.push(A(i.toObject()));continue e}i.meta.isAsync?await i.run():i.run()}t&&this.executionReport.steps?.push(A(i.toObject()))}catch(d){console.error(d),this.runStatus="failure"}}this.runStatus==="waiting"&&(this.runStatus="success"),this.executionReport.status=this.runStatus,this.executionReport.end=new Date}toObject(){const t={...super.toObject(),nodes:[],edges:[]};for(const e of this.nodes)t.nodes.push(e.toObject());for(const e of this.edges)t.edges.push(e.toObject());return t}}class x extends u{static kind="argument";static isConstant=!0;static inputs=u.in(["number"],{name:"position",optional:!0});static outputs=u.out()}class j extends u{static kind="array";static inputs=u.in();static outputs=u.out(["array"]);run(){const t=this.input(0).data;Array.isArray(t)?this.output(0).data=t:this.output(0).clear()}}class v extends u{static kind="boolean";static inputs=u.in();static outputs=u.out(["boolean"]);run(){const t=this.input(0).data;typeof t=="boolean"?this.output(0).data=t:this.output(0).clear()}}class C extends u{static kind="data";static isConstant=!0;static outputs=u.out()}class $ extends u{static kind="dflow";static outputs=u.out(["array"],{name:"nodeKinds"});run(){const t=this.output(0);t.data=this.host.nodeKinds}}class R extends u{static kind="function";static isConstant=!0;static outputs=u.out(["DflowId"],{name:"id"});onCreate(){this.output(0).data=this.id}}class U extends u{static kind="number";static inputs=u.in();static outputs=u.out(["number"]);run(){const t=this.input(0).data;typeof t=="number"?this.output(0).data=t:this.output(0).clear()}}class F extends u{static kind="object";static inputs=u.in();static outputs=u.out(["object"]);run(){const t=this.input(0).data;typeof t=="object"&&t!==null?this.output(0).data=t:this.output(0).clear()}}class O extends u{static kind="return";static isConstant=!0;static inputs=[...u.in(["DflowId"],{name:"functionId"}),...u.in([],{name:"value"})]}class G extends u{static kind="string";static inputs=u.in();static outputs=u.out(["string"]);run(){const t=this.input(0).data;typeof t=="string"?this.output(0).data=t:this.output(0).clear()}}const Q={[x.kind]:x,[j.kind]:j,[v.kind]:v,[C.kind]:C,[$.kind]:$,[U.kind]:U,[F.kind]:F,[R.kind]:R,[G.kind]:G,[O.kind]:O};class M{#t;nodesCatalog;context;constructor(t={}){this.nodesCatalog={...t,...Q},this.#t=new p({id:"g1"}),this.context={}}get executionReport(){return this.#t.executionReport}get edges(){return this.#t.edges}get nodes(){return this.#t.nodes}get numEdges(){return this.#t.numEdges}get numNodes(){return this.#t.numNodes}get nodeKinds(){return Object.keys(this.nodesCatalog)}get runStatusIsSuccess(){return this.#t.runStatus==="success"}get runStatusIsWaiting(){return this.#t.runStatus==="waiting"}get runStatusIsFailure(){return this.#t.runStatus==="failure"}set verbose(t){this.#t.runOptions.verbose=t}clearGraph(){this.#t.clear()}connect(t,e=0){return{to:(s,n=0)=>{const i=this.#t.generateEdgeId(),d=t.output(e),a=s.input(n);this.newEdge({id:i,source:[t.id,d.id],target:[s.id,a.id]})}}}deleteEdge(t){if(typeof t!="string")throw new TypeError(l("edgeId"));const e=this.#t.getEdgeById(t);if(e instanceof I){const[s,n]=e.target;this.getNodeById(s).getInputById(n).disconnect(),this.#t.deleteEdge(t)}else throw new Error(`DflowEdge not found, id=${t}`)}deleteNode(t){if(typeof t!="string")throw new TypeError(l("nodeId"));const e=this.getNodeById(t);if(e instanceof u){for(const s of this.#t.edges){const{source:[n],target:[i]}=s;(n===e.id||i===e.id)&&this.deleteEdge(s.id)}this.#t.deleteNode(t)}else throw new Error(`DflowNode not found, id=${t}`)}deleteEdgesConnectedToPin([t,e]){for(const s of this.edges){const[n,i]=s.source,[d,a]=s.target;(n===t&&i===e||d===t&&a===e)&&this.deleteEdge(s.id)}}executeFunction(t,e){const{verbose:s}=this.#t.runOptions,n=this.#t.nodeConnections,i=p.childrenOfNodeId(t,n),d=[];for(const c of i){const h=this.getNodeById(c);h.kind===O.kind&&d.push(h.id)}const a=d.reduce((c,h,w,T)=>{const z=p.ancestorsOfNodeId(h,n),k=c.concat(z);return w===T.length?Array.from(new Set(k)):k},[]),g=p.sort([...d,...a],n);for(const c of g){const h=this.getNodeById(c);try{switch(h.kind){case x.kind:{const w=h.input(0).data,T=typeof w=="number"&&!isNaN(w)?Math.max(w,0):0;h.output(0).data=e[T];break}case O.kind:return h.input(1).data;default:!h.meta.isConstant&&!h.meta.isAsync&&h.run(),s&&this.executionReport?.steps?.push(A(h.toObject()))}}catch(w){console.error(w)}}}getEdgeById(t){return this.#t.getEdgeById(t)}getNodeById(t){return this.#t.getNodeById(t)}newNode(t){const e=this.nodesCatalog[t.kind]??b,s=o.isDflowId(t.id)?t.id:this.#t.generateNodeId(),n={isAsync:e.isAsync,isConstant:e.isConstant,label:e.label},i=Array.isArray(t.inputs)?t.inputs:u.generateInputIds(e.inputs),d=Array.isArray(t.outputs)?t.outputs:u.generateOutputIds(e.outputs),a=new e({...t,id:s,inputs:i,outputs:d},this,n);return this.#t.addNode(a),a}newEdge(t){const e=o.isDflowId(t.id)?t.id:this.#t.generateEdgeId(),s=new I({...t,id:e});this.#t.addEdge(s);const[n,i]=s.source,[d,a]=s.target,g=this.#t.getNodeById(n),c=this.#t.getNodeById(d),h=g.getOutputById(i);return c.getInputById(a).connectTo(h),s}newInput(t,e){return this.#t.getNodeById(t).newInput(e)}newOutput(t,e){return this.#t.getNodeById(t).newOutput(e)}toObject(){return this.#t.toObject()}async run(){await this.#t.run()}}module.exports=q(X);
