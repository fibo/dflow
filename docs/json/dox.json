{
    "dflow": [
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Any"
                    ],
                    "name": "arg",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "<p>func</p>\n"
                }
            ],
            "description": {
                "full": "<p>Wrap into a Function</p>\n",
                "summary": "<p>Wrap into a Function</p>\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function coerceToFunction (arg) {\n  if (typeof arg === 'function')\n    return arg\n  else\n    return function value () { return arg }\n}",
            "ctx": {
                "type": "function",
                "name": "coerceToFunction",
                "string": "coerceToFunction()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "name",
                    "description": "<p>identifier of task</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Function"
                    ],
                    "name": "func",
                    "description": "<p>to store in registry</p>\n"
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "<p>func stored in registry</p>\n"
                }
            ],
            "description": {
                "full": "<p>Store function in dflow registry</p>\n",
                "summary": "<p>Store function in dflow registry</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function register (name, func) {\n  if (registered[name])\n    return registered[name]\n\n  // At this point func was not found in registry\n  // so dflow will try to get it from global\n  var path = name.split('.')\n\n  var globalName = path[0]\n    , propName = path[1]\n\n  if (typeof global[globalName] !== 'undefined') {\n    if (typeof propName !== 'undefined') {\n      registered[name] = coerceToFunction(global[globalName][propName])\n\n      return registered[name]\n    }\n  }\n\n  // At this point no func was found in global\n  // so if a func was passed as parameter, I assume it should be inserted\n  // into the registry.\n  // Custom functions in registry will not override global definitions.\n\n  registered[name] = coerceToFunction(func)\n  return registered[name]\n}\n\nregister('dflow.register', register)\n\nexports.register = register",
            "ctx": {
                "type": "function",
                "name": "register",
                "string": "register()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Number"
                    ],
                    "description": "<p>index array</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute index of task</p>\n",
                "summary": "<p>Compute index of task</p>\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function indexOfTask (graph, task) {\n  for (var i in graph.tasks)\n    if (task.id === graph.tasks[i].id)\n      return i\n}",
            "ctx": {
                "type": "function",
                "name": "indexOfTask",
                "string": "indexOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Number"
                    ],
                    "name": "id",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Get task by id</p>\n",
                "summary": "<p>Get task by id</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function taskById (graph, id) {\n  for (var i in graph.tasks)\n    if (graph.tasks[i].id === id)\n      return graph.tasks[i]\n}\n\nexports.taskById = taskById",
            "ctx": {
                "type": "function",
                "name": "taskById",
                "string": "taskById()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Array"
                    ],
                    "description": "<p>inputPipes connected to task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute input pipes of task</p>\n",
                "summary": "<p>Compute input pipes of task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function inputPipesOfTask (graph, task) {\n  var inputPipes = []\n\n  graph.pipes.forEach(function (pipe) {\n    if (pipe.to[0] === task.id)\n      inputPipes.push(pipe)\n  })\n\n  return inputPipes\n}\n\nexports.inputPipesOfTask = inputPipesOfTask",
            "ctx": {
                "type": "function",
                "name": "inputPipesOfTask",
                "string": "inputPipesOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Array"
                    ],
                    "description": "<p>parentsOfTask</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute tasks that feeds the given task</p>\n",
                "summary": "<p>Compute tasks that feeds the given task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function parentsOfTask (graph, task) {\n  var parentTasks = []\n\n  inputPipesOfTask(graph, task)\n    .forEach(function (pipe) {\n      graph.tasks.forEach(function (task) {\n        if (pipe.from === task.id)\n          parentTasks.push(task)\n      })\n    })\n\n  return parentTasks\n}\n\nexports.parentsOfTask = parentsOfTask",
            "ctx": {
                "type": "function",
                "name": "parentsOfTask",
                "string": "parentsOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Number"
                    ],
                    "description": "<p>level</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute level of task</p>\n<p>A task that has no input pipe has level 0.\nThe level task equals one plus the max level of parent tasks.</p>\n",
                "summary": "<p>Compute level of task</p>\n",
                "body": "<p>A task that has no input pipe has level 0.\nThe level task equals one plus the max level of parent tasks.</p>\n"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function levelOfTask (graph, task) {\n  var level = 0\n\n  parentsOfTask(graph, task)\n    .forEach( function (parentTask) {\n      level = Math.max(level, levelOfTask(graph, parentTask) + 1)\n    })\n\n  return level\n}\n\nexports.levelOfTask = levelOfTask",
            "ctx": {
                "type": "function",
                "name": "levelOfTask",
                "string": "levelOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Array"
                    ],
                    "description": "<p>inputArg</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute arguments of task</p>\n",
                "summary": "<p>Compute arguments of task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function inputArgOfTask (graph, task) {\n  var inputArg = task.arg || []\n\n  inputPipesOfTask(graph, task)\n    .forEach(function (pipe) {\n      var argIndex = pipe.to[1]\n        , sourceTask = taskById(graph, pipe.from)\n\n      inputArg[argIndex] = sourceTask.out\n    })\n\n  return inputArg\n}\n\nexports.inputArgOfTask = inputArgOfTask",
            "ctx": {
                "type": "function",
                "name": "inputArgOfTask",
                "string": "inputArgOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>graph</p>\n"
                }
            ],
            "description": {
                "full": "<p>Evaluate a dflow graph</p>\n<p>This is the core of dflow</p>\n",
                "summary": "<p>Evaluate a dflow graph</p>\n",
                "body": "<p>This is the core of dflow</p>\n"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function evaluate (graph) {\n  graph.tasks\n       .sort(function byLevel (a, b) {\n         return levelOfTask(graph, a) - levelOfTask(graph, b)\n       })\n       .forEach(function run (task) {\n         var arg, func, i, out\n\n         func = register(task.name)\n\n         arg = inputArgOfTask(graph, task)\n         out = func.apply(null, task.arg)\n         i = indexOfTask(graph, task)\n\n         graph.tasks[i].arg = arg\n         graph.tasks[i].out = out\n       })\n\n  return graph\n}\n\nexports.evaluate = evaluate",
            "ctx": {
                "type": "function",
                "name": "evaluate",
                "string": "evaluate()"
            }
        },
        {
            "tags": [
                {
                    "type": "return",
                    "types": [
                        "Boolean"
                    ],
                    "description": "<p>isValid</p>\n"
                }
            ],
            "description": {
                "full": "<p>Checks task name is available in registry</p>\n",
                "summary": "<p>Checks task name is available in registry</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function isTask () {\n\n}",
            "ctx": {
                "type": "function",
                "name": "isTask",
                "string": "isTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Boolean"
                    ],
                    "description": "<p>isValid</p>\n"
                }
            ],
            "description": {
                "full": "<p>Checks tasks and pipes are valid</p>\n",
                "summary": "<p>Checks tasks and pipes are valid</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function isGraph () {\n\n}",
            "ctx": {
                "type": "function",
                "name": "isGraph",
                "string": "isGraph()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "name",
                    "description": "<p>of task in the registry</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Array"
                    ],
                    "name": "arg",
                    "description": "<p>list passed to task function</p>\n"
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Add a task</p>\n",
                "summary": "<p>Add a task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function addTask (graph, name, arg) {\n  if (typeof arg === 'undefined')\n    arg = []\n\n  var task = {\n    id: nextId++\n  , name: name\n  , arg: arg\n  }\n\n  graph.tasks.push(task)\n\n  return task\n}\n\nexports.addTask = addTask",
            "ctx": {
                "type": "function",
                "name": "addTask",
                "string": "addTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "from",
                    "description": "<p>source task</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "to",
                    "description": "<p>target task</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "argIndex",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>pipe</p>\n"
                }
            ],
            "description": {
                "full": "<p>Pipe two tasks</p>\n",
                "summary": "<p>Pipe two tasks</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function addPipe (graph, from, to, argIndex) {\n  var sourceId, targetId\n\n  sourceId = from.id\n  targetId = to.id\n\n  if (typeof argIndex === 'undefined')\n    argIndex = to.arg.length + 1\n\n  var pipe = {\n    id: nextId++\n  , from: sourceId\n  , to: [targetId, argIndex]\n  }\n\n  return pipe\n}\n\nexports.addPipe = addPipe",
            "ctx": {
                "type": "function",
                "name": "addPipe",
                "string": "addPipe()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Remove a task</p>\n",
                "summary": "<p>Remove a task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function delTask (graph, task) {\n\n  return task\n}",
            "ctx": {
                "type": "function",
                "name": "delTask",
                "string": "delTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "pipe",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>pipe</p>\n"
                }
            ],
            "description": {
                "full": "<p>Remove a pipe</p>\n",
                "summary": "<p>Remove a pipe</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function delPipe (graph, pipe) {\n\n  return pipe\n}",
            "ctx": {
                "type": "function",
                "name": "delPipe",
                "string": "delPipe()"
            }
        },
        {
            "tags": [
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>graph</p>\n"
                }
            ],
            "description": {
                "full": "<p>Return an empty graph</p>\n",
                "summary": "<p>Return an empty graph</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function emptyGraph () {\n  return {\n    tasks: []\n  , pipes: []\n  }\n}\n\nexports.emptyGraph = emptyGraph",
            "ctx": {
                "type": "function",
                "name": "emptyGraph",
                "string": "emptyGraph()"
            }
        }
    ],
    "registry": [
        {
            "tags": [],
            "description": {
                "full": "",
                "summary": "",
                "body": ""
            },
            "isPrivate": false,
            "code": "function addition (a, b) { return a + b }\nfunction subtraction (a, b) { return a - b }\nfunction multiplication (a, b) { return a * b }\nfunction division (a, b) { return a / b }\n\nfunction modulus (a, b) { return a % b }\n\nfunction increment (a) { return a++ }\nfunction decrement (a) { return a-- }\n\nfunction and (a, b) { return a && b }\n\nfunction or (a, b) { return a || b }\n\nfunction array () { return Array.prototype.slice.call(arguments, 0) }\n\nfunction dot (obj, propName) {\n  if (typeof propName === 'string') {\n    if (typeof obj === 'object')\n      return obj[propName]\n    else\n      // fallback to global object\n      return global[obj][propName]\n  }\n}\n\nvar registry = {\n  'and'            : and\n, '&&'             : and\n, 'or'             : or\n, '||'             : or\n, '.'              : dot\n, 'dot'            : dot\n, '+'              : addition\n, 'addition'       : addition\n, '-'              : subtraction\n, 'subtraction'    : subtraction\n, '*'              : multiplication\n, 'multiplication' : multiplication\n, '/'              : division\n, 'division'       : division\n, '%'              : modulus\n, 'modulus'        : modulus\n, '++'             : increment\n, 'increment'      : increment\n, '--'             : decrement\n, 'decrement'      : decrement\n, '=='             : function (a, b) { return a == b }\n, '!='             : function (a, b) { return a != b }\n, '==='            : function (a, b) { return a === b }\n, '!=='            : function (a, b) { return a !== b }\n, 'string'         : function string (x) { if (typeof x === 'string') return x }\n, 'number'         : function number (x) { if (typeof x === 'number') return x }\n, 'object'         : function object (x) { if (typeof x === 'object') return x }\n, 'typeof'         : function _typeof (x) { return typeof x }\n, 'undefined'      : function _undefined () { return undefined }\n, 'null'           : function _null () { return null }\n, '[]'             : array\n, 'array'          : array\n}\n\nmodule.exports = registry",
            "ctx": {
                "type": "function",
                "name": "addition",
                "string": "addition()"
            }
        }
    ]
}