{
    "Graph": [
        {
            "tags": [],
            "description": {
                "full": "<p>DflowGraph constructor</p>\n<pre><code>var dflow = require(&#39;dflow&#39;)\n\nvar graph = new dflow.Graph()\n</code></pre>",
                "summary": "<p>DflowGraph constructor</p>\n",
                "body": "<pre><code>var dflow = require(&#39;dflow&#39;)\n\nvar graph = new dflow.Graph()\n</code></pre>"
            },
            "ignore": false,
            "code": "function DflowGraph () {\n  this.tasks = []\n  this.pipes = []\n}",
            "ctx": {
                "type": "function",
                "name": "DflowGraph",
                "string": "DflowGraph()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "name",
                    "description": "<p>of task in the registry</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Array"
                    ],
                    "name": "arg",
                    "description": "<p>list passed to task function</p>\n"
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Add a task</p>\n",
                "summary": "<p>Add a task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function addTask (name, arg) {\n  if (typeof arg === 'undefined')\n    arg = []\n\n  var task = {\n    id: nextId++\n  , name: name\n  , arg: arg\n  }\n\n  this.tasks.push(task)\n\n  return task\n}\n\nDflowGraph.prototype.addTask = addTask",
            "ctx": {
                "type": "function",
                "name": "addTask",
                "string": "addTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "from",
                    "description": "<p>source task</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "to",
                    "description": "<p>target task</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "argIndex",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>pipe</p>\n"
                }
            ],
            "description": {
                "full": "<p>Pipe two tasks</p>\n",
                "summary": "<p>Pipe two tasks</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function addPipe (from, to, argIndex) {\n  var sourceId, targetId\n\n  sourceId = from.id\n  targetId = to.id\n\n  if (typeof argIndex === 'undefined')\n    argIndex = to.arg.length + 1\n\n  var pipe = {\n    id: nextId++\n  , from: sourceId\n  , to: [targetId, argIndex]\n  }\n\n  this.pipes.push(pipe)\n\n  return pipe\n}\n\nDflowGraph.prototype.addPipe = addPipe",
            "ctx": {
                "type": "function",
                "name": "addPipe",
                "string": "addPipe()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Remove a task</p>\n",
                "summary": "<p>Remove a task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function delTask (task) {\n  this.tasks.splice(algorithm.indexOfTask(task), 1)\n\n  return task\n}\n\nDflowGraph.prototype.delTask = delTask",
            "ctx": {
                "type": "function",
                "name": "delTask",
                "string": "delTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "pipe",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>pipe</p>\n"
                }
            ],
            "description": {
                "full": "<p>Remove a pipe</p>\n",
                "summary": "<p>Remove a pipe</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function delPipe (graph, pipe) {\n\n  return pipe\n}\n\nDflowGraph.prototype.delPipe = delPipe",
            "ctx": {
                "type": "function",
                "name": "delPipe",
                "string": "delPipe()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Number"
                    ],
                    "name": "id",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Get task by given id</p>\n",
                "summary": "<p>Get task by given id</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function getTaskById (id) {\n  return algorithm.getTaskById(this, id)\n}\n\nDflowGraph.prototype.getTaskById = getTaskById",
            "ctx": {
                "type": "function",
                "name": "getTaskById",
                "string": "getTaskById()"
            }
        },
        {
            "tags": [],
            "description": {
                "full": "<p>Execute tasks</p>\n<p>Delegate to <code>dflow.evaluate()</code></p>\n",
                "summary": "<p>Execute tasks</p>\n",
                "body": "<p>Delegate to <code>dflow.evaluate()</code></p>\n"
            },
            "ignore": false,
            "code": "function evaluate () {\n  var graph = algorithm.evaluate(this)\n\n  this.tasks = graph.tasks\n  this.pipes = graph.pipes\n}\n\nDflowGraph.prototype.evaluate = evaluate\n\nmodule.exports = DflowGraph",
            "ctx": {
                "type": "function",
                "name": "evaluate",
                "string": "evaluate()"
            }
        }
    ],
    "Registry": [
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Any"
                    ],
                    "name": "arg",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "<p>func</p>\n"
                }
            ],
            "description": {
                "full": "<p>Wrap into a Function</p>\n",
                "summary": "<p>Wrap into a Function</p>\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function coerceToFunction (arg) {\n  if (typeof arg === 'function')\n    return arg\n  else\n    return function value () { return arg }\n}",
            "ctx": {
                "type": "function",
                "name": "coerceToFunction",
                "string": "coerceToFunction()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "name",
                    "description": "<p>identifier of task</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Function"
                    ],
                    "name": "func",
                    "description": "<p>to store in registry</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "context",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "<p>func stored in registry</p>\n"
                }
            ],
            "description": {
                "full": "<p>Store function in dflow registry</p>\n<pre><code>dflow.Registry.set(&#39;foo&#39;, function () { return {bar: &#39;quz&#39;}})\n</code></pre>",
                "summary": "<p>Store function in dflow registry</p>\n",
                "body": "<pre><code>dflow.Registry.set(&#39;foo&#39;, function () { return {bar: &#39;quz&#39;}})\n</code></pre>"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function set (name, func, context) {\n    registered[name] = coerceToFunction(func)\n\n  // If optional context is provided, bind function to it\n  if (typeof context === 'object')\n    registered[name] = registered[name].bind(context)\n\n  return registered[name]\n}\n\nexports.set = set",
            "ctx": {
                "type": "function",
                "name": "set",
                "string": "set()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "name",
                    "description": "<p>identifier of task</p>\n"
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "<p>func stored in registry</p>\n"
                }
            ],
            "description": {
                "full": "<p>Retrieve function from dflow registry</p>\n",
                "summary": "<p>Retrieve function from dflow registry</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function get (name) {\n  if (typeof registered[name] === 'function')\n    return registered[name]\n\n  // At this point func was not found in registry\n  // so dflow will try to get it from global\n  var path = name.split('.')\n\n  var globalName = path[0]\n    , propName = path[1]\n\n  if (typeof global[globalName] !== 'undefined') {\n    if (typeof propName !== 'undefined') {\n      return coerceToFunction(global[globalName][propName])\n    }\n  }\n}\n\nexports.get = get",
            "ctx": {
                "type": "function",
                "name": "get",
                "string": "get()"
            }
        }
    ],
    "algorithm": [
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "String"
                    ],
                    "name": "name",
                    "description": "<p>identifier of task</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Function"
                    ],
                    "name": "func",
                    "description": "<p>to store in registry</p>\n"
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "context",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Function"
                    ],
                    "description": "<p>func stored in registry</p>\n"
                }
            ],
            "description": {
                "full": "<p>Store function in dflow registry</p>\n<p>Delegates to dflow.Registry.add</p>\n",
                "summary": "<p>Store function in dflow registry</p>\n",
                "body": "<p>Delegates to dflow.Registry.add</p>\n"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function register (name, func, context) {\n  return Registry.set(name, func, context)\n}\n\nregister('dflow.register', register)\n\nexports.register = register",
            "ctx": {
                "type": "function",
                "name": "register",
                "string": "register()"
            }
        },
        {
            "tags": [
                {
                    "type": "api",
                    "visibility": "private"
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Number"
                    ],
                    "description": "<p>index array</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute index of task</p>\n",
                "summary": "<p>Compute index of task</p>\n",
                "body": ""
            },
            "isPrivate": true,
            "ignore": false,
            "code": "function indexOfTask (graph, task) {\n  for (var i in graph.tasks)\n    if (task.id === graph.tasks[i].id)\n      return i\n}\n\nexports.indexOfTask = indexOfTask",
            "ctx": {
                "type": "function",
                "name": "indexOfTask",
                "string": "indexOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Number"
                    ],
                    "name": "id",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Get task by id</p>\n",
                "summary": "<p>Get task by id</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function getTaskById (graph, id) {\n  for (var i in graph.tasks)\n    if (graph.tasks[i].id === id)\n      return graph.tasks[i]\n}\n\nexports.getTaskById = getTaskById",
            "ctx": {
                "type": "function",
                "name": "getTaskById",
                "string": "getTaskById()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Array"
                    ],
                    "description": "<p>inputPipes connected to task</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute input pipes of task</p>\n",
                "summary": "<p>Compute input pipes of task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function inputPipesOfTask (graph, task) {\n  var inputPipes = []\n\n  graph.pipes.forEach(function (pipe) {\n    if (pipe.to[0] === task.id)\n      inputPipes.push(pipe)\n  })\n\n  return inputPipes\n}\n\nexports.inputPipesOfTask = inputPipesOfTask",
            "ctx": {
                "type": "function",
                "name": "inputPipesOfTask",
                "string": "inputPipesOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Array"
                    ],
                    "description": "<p>parentsOfTask</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute tasks that feeds the given task</p>\n",
                "summary": "<p>Compute tasks that feeds the given task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function parentsOfTask (graph, task) {\n  var parentTasks = []\n\n  inputPipesOfTask(graph, task)\n    .forEach(function (pipe) {\n      graph.tasks.forEach(function (task) {\n        if (pipe.from === task.id)\n          parentTasks.push(task)\n      })\n    })\n\n  return parentTasks\n}\n\nexports.parentsOfTask = parentsOfTask",
            "ctx": {
                "type": "function",
                "name": "parentsOfTask",
                "string": "parentsOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Number"
                    ],
                    "description": "<p>level</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute level of task</p>\n<p>A task that has no input pipe has level 0.\nThe level task equals one plus the max level of parent tasks.</p>\n",
                "summary": "<p>Compute level of task</p>\n",
                "body": "<p>A task that has no input pipe has level 0.\nThe level task equals one plus the max level of parent tasks.</p>\n"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function levelOfTask (graph, task) {\n  var level = 0\n\n  parentsOfTask(graph, task)\n    .forEach( function (parentTask) {\n      level = Math.max(level, levelOfTask(graph, parentTask) + 1)\n    })\n\n  return level\n}\n\nexports.levelOfTask = levelOfTask",
            "ctx": {
                "type": "function",
                "name": "levelOfTask",
                "string": "levelOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "task",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Array"
                    ],
                    "description": "<p>inputArg</p>\n"
                }
            ],
            "description": {
                "full": "<p>Compute arguments of task</p>\n",
                "summary": "<p>Compute arguments of task</p>\n",
                "body": ""
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function inputArgOfTask (graph, task) {\n  var inputArg = task.arg || []\n\n  inputPipesOfTask(graph, task)\n    .forEach(function (pipe) {\n      var arg\n        , argIndex\n        , out\n        , sourceId\n        , sourceProp\n        , sourceTask\n        , targetId\n\n      // pipe.from can be a taskId or an array [taskId, prop]\n      if (Array.isArray(pipe.from)) {\n        sourceId = pipe.from[0]\n        sourceProp = pipe.from[1]\n      }\n      else {\n        sourceId = pipe.from\n        sourceProp = 'out'\n      }\n\n      sourceTask = getTaskById(graph, sourceId)\n      arg = sourceTask[sourceProp]\n\n      // pipe.to is an array [taskId, argIndex]\n      argIndex = pipe.to[1]\n      inputArg[argIndex] = arg\n    })\n\n  return inputArg\n}\n\nexports.inputArgOfTask = inputArgOfTask",
            "ctx": {
                "type": "function",
                "name": "inputArgOfTask",
                "string": "inputArgOfTask()"
            }
        },
        {
            "tags": [
                {
                    "type": "param",
                    "types": [
                        "Object"
                    ],
                    "name": "graph",
                    "description": ""
                },
                {
                    "type": "",
                    "string": ""
                },
                {
                    "type": "return",
                    "types": [
                        "Object"
                    ],
                    "description": "<p>graph</p>\n"
                }
            ],
            "description": {
                "full": "<p>Evaluate a dflow graph</p>\n<p>This is the core of dflow</p>\n",
                "summary": "<p>Evaluate a dflow graph</p>\n",
                "body": "<p>This is the core of dflow</p>\n"
            },
            "isPrivate": false,
            "ignore": false,
            "code": "function evaluate (graph) {\n  register('thisGraph', function thisGraph () { return graph })\n\n  graph.tasks\n       .sort(function byLevel (a, b) {\n         return levelOfTask(graph, a) - levelOfTask(graph, b)\n       })\n       .forEach(function run (task) {\n         var arg, func, i, out\n\n         func = Registry.get(task.name)\n\n         arg = inputArgOfTask(graph, task)\n         out = func.apply(null, task.arg)\n         i = indexOfTask(graph, task)\n\n         graph.tasks[i].arg = arg\n         graph.tasks[i].out = out\n       })\n\n  return graph\n}\n\nexports.evaluate = evaluate",
            "ctx": {
                "type": "function",
                "name": "evaluate",
                "string": "evaluate()"
            }
        }
    ]
}